// clang-format off

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2015-05-22 14:09:58.982511
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#include <tesseract_common/macros.h>
TESSERACT_COMMON_IGNORE_WARNINGS_PUSH
#define IKFAST_HAS_LIBRARY
#include <tesseract_kinematics/ikfast/external/ikfast.h>  // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)(x)]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION == 61);

#include <cmath>
#include <vector>
#include <limits>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <iostream>
#include <cstddef>  // for NULL
#include <memory>   // for allocator_traits<>::value_type

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b)                                                                                               \
  {                                                                                                                    \
    if (!(b))                                                                                                          \
    {                                                                                                                  \
      std::stringstream ss;                                                                                            \
      ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " << __PRETTY_FUNCTION__ << ": Assertion '"      \
         << #b << "' failed";                                                                                          \
      throw std::runtime_error(ss.str());                                                                              \
    }                                                                                                                  \
  }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI ((IkReal)6.28318530717959)
#define IKPI ((IkReal)3.14159265358979)
#define IKPI_2 ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif  // _MSC_VER

// lapack routines
extern "C" {
void dgetrf_(const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
void zgetrf_(const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
void dgesv_(const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
void dgetrs_(const char* trans,
             const int* n,
             const int* nrhs,
             double* a,
             const int* lda,
             int* ipiv,
             double* b,
             const int* ldb,
             int* info);
void dgeev_(const char* jobvl,
            const char* jobvr,
            const int* n,
            double* a,
            const int* lda,
            double* wr,
            double* wi,
            double* vl,
            const int* ldvl,
            double* vr,
            const int* ldvr,
            double* work,
            const int* lwork,
            int* info);
}

using namespace std;  // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f * f; }
inline double IKsqr(double f) { return f * f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is
                                                                                 // wrong with the solver
  if (f <= -1)
    return float(-IKPI_2);
  else if (f >= 1)
    return float(IKPI_2);
  return asinf(f);
}
inline double IKasin(double f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is
                                                                                 // wrong with the solver
  if (f <= -1)
    return -IKPI_2;
  else if (f >= 1)
    return IKPI_2;
  return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
  while (x < 0)
  {
    x += y;
  }
  return fmodf(x, y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
  while (x < 0)
  {
    x += y;
  }
  return fmod(x, y);
}

inline float IKacos(float f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is
                                                                                 // wrong with the solver
  if (f <= -1)
    return float(IKPI);
  else if (f >= 1)
    return float(0);
  return acosf(f);
}
inline double IKacos(double f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is
                                                                                 // wrong with the solver
  if (f <= -1)
    return IKPI;
  else if (f >= 1)
    return 0;
  return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f)
{
  if (f <= 0.0f)
    return 0.0f;
  return sqrtf(f);
}
inline double IKsqrt(double f)
{
  if (f <= 0.0)
    return 0.0;
  return sqrt(f);
}
inline float IKatan2(float fy, float fx)
{
  if (isnan(fy))
  {
    IKFAST_ASSERT(!isnan(fx));  // if both are nan, probably wrong value will be returned
    return float(IKPI_2);
  }
  else if (isnan(fx))
  {
    return 0;
  }
  return atan2f(fy, fx);
}
inline double IKatan2(double fy, double fx)
{
  if (isnan(fy))
  {
    IKFAST_ASSERT(!isnan(fx));  // if both are nan, probably wrong value will be returned
    return IKPI_2;
  }
  else if (isnan(fx))
  {
    return 0;
  }
  return atan2(fy, fx);
}

inline float IKsign(float f)
{
  if (f > 0)
  {
    return float(1);
  }
  else if (f < 0)
  {
    return float(-1);
  }
  return 0;
}

inline double IKsign(double f)
{
  if (f > 0)
  {
    return 1.0;
  }
  else if (f < 0)
  {
    return -1.0;
  }
  return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
  IkReal x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23,
      x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46,
      x47, x48, x49;
  x0 = IKcos(j[0]);
  x1 = IKcos(j[3]);
  x2 = IKsin(j[0]);
  x3 = IKsin(j[3]);
  x4 = IKsin(j[1]);
  x5 = IKsin(j[2]);
  x6 = IKcos(j[1]);
  x7 = IKcos(j[2]);
  x8 = IKsin(j[5]);
  x9 = IKsin(j[4]);
  x10 = IKcos(j[4]);
  x11 = IKcos(j[5]);
  x12 = ((IkReal(0.0850000000000000)) * (x1));
  x13 = ((IkReal(0.135000000000000)) * (x7));
  x14 = ((IkReal(0.0850000000000000)) * (x3));
  x15 = ((IkReal(1.00000000000000)) * (x7));
  x16 = ((IkReal(1.00000000000000)) * (x2));
  x17 = ((IkReal(0.0850000000000000)) * (x5));
  x18 = ((IkReal(1.00000000000000)) * (x9));
  x19 = ((IkReal(1.00000000000000)) * (x10));
  x20 = ((IkReal(1.00000000000000)) * (x0));
  x21 = ((IkReal(0.755000000000000)) * (x5));
  x22 = ((IkReal(1.00000000000000)) * (x5));
  x23 = ((x0) * (x4));
  x24 = ((x6) * (x7));
  x25 = ((x5) * (x6));
  x26 = ((x2) * (x4));
  x27 = ((x4) * (x5));
  x28 = ((x1) * (x9));
  x29 = ((x4) * (x7));
  x30 = ((x15) * (x6));
  x31 = ((x20) * (x27));
  x32 = ((x16) * (x27));
  x33 = ((x27) + (((IkReal(-1.00000000000000)) * (x30))));
  x34 = ((x30) + (((IkReal(-1.00000000000000)) * (x22) * (x4))));
  x35 = ((((x22) * (x6))) + (((x15) * (x4))));
  x36 = ((x1) * (x33));
  x37 = ((x3) * (x34));
  x38 = ((x10) * (x36));
  x39 = ((((IkReal(-1.00000000000000)) * (x0) * (x30))) + (x31));
  x40 = ((((IkReal(-1.00000000000000)) * (x2) * (x30))) + (x32));
  x41 = ((((x15) * (x23))) + (((x20) * (x25))));
  x42 = ((IkReal(-1.00000000000000)) * (x41));
  x43 = ((((x15) * (x26))) + (((x16) * (x25))));
  x44 = ((IkReal(-1.00000000000000)) * (x43));
  x45 = ((((x1) * (x42))) + (((IkReal(-1.00000000000000)) * (x16) * (x3))));
  x46 = ((((x3) * (x41))) + (((IkReal(-1.00000000000000)) * (x1) * (x16))));
  x47 = ((((x3) * (x43))) + (((x0) * (x1))));
  x48 = ((((x0) * (x3))) + (((x1) * (x44))));
  x49 = ((x10) * (x45));
  eerot[0] = ((((x46) * (x8))) + (((x11) * (((x49) + (((x39) * (x9))))))));
  eerot[1] =
      ((((x8) *
         (((((IkReal(-1.00000000000000)) * (x18) * (x39))) + (((IkReal(-1.00000000000000)) * (x19) * (x45))))))) +
       (((x11) * (x46))));
  eerot[2] = ((((x45) * (x9))) + (((x10) * (((((IkReal(-1.00000000000000)) * (x31))) + (((x0) * (x24))))))));
  IkReal x50 = ((x0) * (x24));
  IkReal x51 = ((IkReal(1.00000000000000)) * (x23));
  eetrans[0] =
      ((((IkReal(0.135000000000000)) * (x0) * (x25))) + (((IkReal(0.755000000000000)) * (x50))) +
       (((IkReal(-1.00000000000000)) * (x21) * (x51))) +
       (((x10) * (((((IkReal(0.0850000000000000)) * (x50))) + (((IkReal(-1.00000000000000)) * (x17) * (x51))))))) +
       (((x13) * (x23))) + (((IkReal(0.100000000000000)) * (x0))) +
       (((x9) * (((((x12) * (x42))) + (((IkReal(-1.00000000000000)) * (x14) * (x2))))))) +
       (((IkReal(0.705000000000000)) * (x23))));
  eerot[3] = ((((x47) * (x8))) + (((x11) * (((((x40) * (x9))) + (((x10) * (x48))))))));
  eerot[4] = ((((x11) * (x47))) + (((x8) * (((((IkReal(-1.00000000000000)) * (x18) * (x40))) +
                                             (((IkReal(-1.00000000000000)) * (x19) * (x48))))))));
  eerot[5] = ((((x48) * (x9))) + (((x10) * (((((IkReal(-1.00000000000000)) * (x32))) + (((x2) * (x24))))))));
  IkReal x52 = ((x2) * (x24));
  IkReal x53 = ((IkReal(1.00000000000000)) * (x26));
  eetrans[1] =
      ((((IkReal(0.755000000000000)) * (x52))) + (((x13) * (x26))) +
       (((x10) * (((((IkReal(0.0850000000000000)) * (x52))) + (((IkReal(-1.00000000000000)) * (x17) * (x53))))))) +
       (((x9) * (((((x0) * (x14))) + (((x12) * (x44))))))) + (((IkReal(0.100000000000000)) * (x2))) +
       (((IkReal(-1.00000000000000)) * (x21) * (x53))) + (((IkReal(0.705000000000000)) * (x26))) +
       (((IkReal(0.135000000000000)) * (x2) * (x25))));
  eerot[6] = ((((x11) * (((((x35) * (x9))) + (x38))))) + (((x37) * (x8))));
  eerot[7] = ((((x11) * (x37))) + (((x8) * (((((IkReal(-1.00000000000000)) * (x18) * (x35))) +
                                             (((IkReal(-1.00000000000000)) * (x19) * (x36))))))));
  eerot[8] = ((((IkReal(-1.00000000000000)) * (x10) * (x35))) + (((x28) * (x33))));
  IkReal x54 = ((IkReal(1.00000000000000)) * (x6));
  eetrans[2] =
      ((IkReal(0.615000000000000)) +
       (((x10) * (((((IkReal(-0.0850000000000000)) * (x29))) + (((IkReal(-1.00000000000000)) * (x17) * (x54))))))) +
       (((x13) * (x6))) + (((x28) * (((((IkReal(-0.0850000000000000)) * (x24))) + (((x17) * (x4))))))) +
       (((IkReal(-1.00000000000000)) * (x21) * (x54))) + (((IkReal(0.705000000000000)) * (x6))) +
       (((IkReal(-0.755000000000000)) * (x29))) + (((IkReal(-0.135000000000000)) * (x27))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver
{
public:
  IkReal j0, cj0, sj0, htj0, j1, cj1, sj1, htj1, j2, cj2, sj2, htj2, j3, cj3, sj3, htj3, j4, cj4, sj4, htj4, j5, cj5,
      sj5, htj5, new_r00, r00, rxp0_0, new_r01, r01, rxp0_1, new_r02, r02, rxp0_2, new_r10, r10, rxp1_0, new_r11, r11,
      rxp1_1, new_r12, r12, rxp1_2, new_r20, r20, rxp2_0, new_r21, r21, rxp2_1, new_r22, r22, rxp2_2, new_px, px, npx,
      new_py, py, npy, new_pz, pz, npz, pp;
  unsigned char _ij0[2], _nj0, _ij1[2], _nj1, _ij2[2], _nj2, _ij3[2], _nj3, _ij4[2], _nj4, _ij5[2], _nj5;

  bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
  {
    j0 = numeric_limits<IkReal>::quiet_NaN();
    _ij0[0] = -1;
    _ij0[1] = -1;
    _nj0 = -1;
    j1 = numeric_limits<IkReal>::quiet_NaN();
    _ij1[0] = -1;
    _ij1[1] = -1;
    _nj1 = -1;
    j2 = numeric_limits<IkReal>::quiet_NaN();
    _ij2[0] = -1;
    _ij2[1] = -1;
    _nj2 = -1;
    j3 = numeric_limits<IkReal>::quiet_NaN();
    _ij3[0] = -1;
    _ij3[1] = -1;
    _nj3 = -1;
    j4 = numeric_limits<IkReal>::quiet_NaN();
    _ij4[0] = -1;
    _ij4[1] = -1;
    _nj4 = -1;
    j5 = numeric_limits<IkReal>::quiet_NaN();
    _ij5[0] = -1;
    _ij5[1] = -1;
    _nj5 = -1;
    for (int dummyiter = 0; dummyiter < 1; ++dummyiter)
    {
      solutions.Clear();
      r00 = eerot[0 * 3 + 0];
      r01 = eerot[0 * 3 + 1];
      r02 = eerot[0 * 3 + 2];
      r10 = eerot[1 * 3 + 0];
      r11 = eerot[1 * 3 + 1];
      r12 = eerot[1 * 3 + 2];
      r20 = eerot[2 * 3 + 0];
      r21 = eerot[2 * 3 + 1];
      r22 = eerot[2 * 3 + 2];
      px = eetrans[0];
      py = eetrans[1];
      pz = eetrans[2];

      new_r00 = r00;
      new_r01 = r01;
      new_r02 = r02;
      new_px = ((((IkReal(-0.0850000000000000)) * (r02))) + (px));
      new_r10 = r10;
      new_r11 = r11;
      new_r12 = r12;
      new_py = ((((IkReal(-0.0850000000000000)) * (r12))) + (py));
      new_r20 = r20;
      new_r21 = r21;
      new_r22 = r22;
      new_pz = ((IkReal(-0.615000000000000)) + (((IkReal(-0.0850000000000000)) * (r22))) + (pz));
      r00 = new_r00;
      r01 = new_r01;
      r02 = new_r02;
      r10 = new_r10;
      r11 = new_r11;
      r12 = new_r12;
      r20 = new_r20;
      r21 = new_r21;
      r22 = new_r22;
      px = new_px;
      py = new_py;
      pz = new_pz;
      pp = (((px) * (px)) + ((pz) * (pz)) + ((py) * (py)));
      npx = ((((py) * (r10))) + (((pz) * (r20))) + (((px) * (r00))));
      npy = ((((px) * (r01))) + (((pz) * (r21))) + (((py) * (r11))));
      npz = ((((py) * (r12))) + (((pz) * (r22))) + (((px) * (r02))));
      rxp0_0 = ((((IkReal(-1.00000000000000)) * (py) * (r20))) + (((pz) * (r10))));
      rxp0_1 = ((((px) * (r20))) + (((IkReal(-1.00000000000000)) * (pz) * (r00))));
      rxp0_2 = ((((py) * (r00))) + (((IkReal(-1.00000000000000)) * (px) * (r10))));
      rxp1_0 = ((((pz) * (r11))) + (((IkReal(-1.00000000000000)) * (py) * (r21))));
      rxp1_1 = ((((IkReal(-1.00000000000000)) * (pz) * (r01))) + (((px) * (r21))));
      rxp1_2 = ((((py) * (r01))) + (((IkReal(-1.00000000000000)) * (px) * (r11))));
      rxp2_0 = ((((IkReal(-1.00000000000000)) * (py) * (r22))) + (((pz) * (r12))));
      rxp2_1 = ((((px) * (r22))) + (((IkReal(-1.00000000000000)) * (pz) * (r02))));
      rxp2_2 = ((((py) * (r02))) + (((IkReal(-1.00000000000000)) * (px) * (r12))));
      {
        IkReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2] = { false };
        _nj0 = 2;
        if (IKabs(((IkReal(-1.00000000000000)) * (py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH)
          continue;
        IkReal x55 = IKatan2(((IkReal(-1.00000000000000)) * (py)), px);
        j0array[0] = ((IkReal(-1.00000000000000)) * (x55));
        sj0array[0] = IKsin(j0array[0]);
        cj0array[0] = IKcos(j0array[0]);
        j0array[1] = ((IkReal(3.14159265358979)) + (((IkReal(-1.00000000000000)) * (x55))));
        sj0array[1] = IKsin(j0array[1]);
        cj0array[1] = IKcos(j0array[1]);
        if (j0array[0] > IKPI)
        {
          j0array[0] -= IK2PI;
        }
        else if (j0array[0] < -IKPI)
        {
          j0array[0] += IK2PI;
        }
        j0valid[0] = true;
        if (j0array[1] > IKPI)
        {
          j0array[1] -= IK2PI;
        }
        else if (j0array[1] < -IKPI)
        {
          j0array[1] += IK2PI;
        }
        j0valid[1] = true;
        for (int ij0 = 0; ij0 < 2; ++ij0)
        {
          if (!j0valid[ij0])
          {
            continue;
          }
          _ij0[0] = ij0;
          _ij0[1] = -1;
          for (int iij0 = ij0 + 1; iij0 < 2; ++iij0)
          {
            if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
            {
              j0valid[iij0] = false;
              _ij0[1] = iij0;
              break;
            }
          }
          j0 = j0array[ij0];
          cj0 = cj0array[ij0];
          sj0 = sj0array[ij0];

          {
            IkReal j2array[2], cj2array[2], sj2array[2];
            bool j2valid[2] = { false };
            _nj2 = 2;
            if ((((IkReal(0.994304644497180)) + (((IkReal(0.184939600473773)) * (py) * (sj0))) +
                  (((IkReal(0.184939600473773)) * (cj0) * (px))) + (((IkReal(-0.924698002368864)) * (pp))))) <
                    -1 - IKFAST_SINCOS_THRESH ||
                (((IkReal(0.994304644497180)) + (((IkReal(0.184939600473773)) * (py) * (sj0))) +
                  (((IkReal(0.184939600473773)) * (cj0) * (px))) + (((IkReal(-0.924698002368864)) * (pp))))) >
                    1 + IKFAST_SINCOS_THRESH)
              continue;
            IkReal x56 =
                IKasin(((IkReal(0.994304644497180)) + (((IkReal(0.184939600473773)) * (py) * (sj0))) +
                        (((IkReal(0.184939600473773)) * (cj0) * (px))) + (((IkReal(-0.924698002368864)) * (pp)))));
            j2array[0] = ((IkReal(-2.96465459743209)) + (((IkReal(-1.00000000000000)) * (x56))));
            sj2array[0] = IKsin(j2array[0]);
            cj2array[0] = IKcos(j2array[0]);
            j2array[1] = ((IkReal(0.176938056157703)) + (x56));
            sj2array[1] = IKsin(j2array[1]);
            cj2array[1] = IKcos(j2array[1]);
            if (j2array[0] > IKPI)
            {
              j2array[0] -= IK2PI;
            }
            else if (j2array[0] < -IKPI)
            {
              j2array[0] += IK2PI;
            }
            j2valid[0] = true;
            if (j2array[1] > IKPI)
            {
              j2array[1] -= IK2PI;
            }
            else if (j2array[1] < -IKPI)
            {
              j2array[1] += IK2PI;
            }
            j2valid[1] = true;
            for (int ij2 = 0; ij2 < 2; ++ij2)
            {
              if (!j2valid[ij2])
              {
                continue;
              }
              _ij2[0] = ij2;
              _ij2[1] = -1;
              for (int iij2 = ij2 + 1; iij2 < 2; ++iij2)
              {
                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                    IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                {
                  j2valid[iij2] = false;
                  _ij2[1] = iij2;
                  break;
                }
              }
              j2 = j2array[ij2];
              cj2 = cj2array[ij2];
              sj2 = sj2array[ij2];

              {
                IkReal dummyeval[1];
                IkReal gconst1;
                IkReal x57 = ((IkReal(0.755000000000000)) * (cj2));
                IkReal x58 = ((py) * (sj0));
                IkReal x59 = ((cj0) * (px));
                IkReal x60 = ((IkReal(0.135000000000000)) * (sj2));
                gconst1 = IKsign(
                    ((((IkReal(0.705000000000000)) * (pz))) + (((IkReal(-1.00000000000000)) * (x58) * (x60))) +
                     (((IkReal(0.0755000000000000)) * (cj2))) + (((IkReal(-0.755000000000000)) * (pz) * (sj2))) +
                     (((IkReal(-1.00000000000000)) * (x57) * (x58))) + (((IkReal(-1.00000000000000)) * (x59) * (x60))) +
                     (((IkReal(-1.00000000000000)) * (x57) * (x59))) + (((IkReal(0.0135000000000000)) * (sj2))) +
                     (((IkReal(0.135000000000000)) * (cj2) * (pz)))));
                IkReal x61 = ((IkReal(10.0000000000000)) * (sj2));
                IkReal x62 = ((cj0) * (px));
                IkReal x63 = ((py) * (sj0));
                IkReal x64 = ((IkReal(55.9259259259259)) * (cj2));
                dummyeval[0] =
                    ((((IkReal(52.2222222222222)) * (pz))) + (((IkReal(-1.00000000000000)) * (x62) * (x64))) + (sj2) +
                     (((IkReal(10.0000000000000)) * (cj2) * (pz))) + (((IkReal(-1.00000000000000)) * (x63) * (x64))) +
                     (((IkReal(-1.00000000000000)) * (x61) * (x62))) + (((IkReal(-1.00000000000000)) * (x61) * (x63))) +
                     (((IkReal(5.59259259259259)) * (cj2))) + (((IkReal(-55.9259259259259)) * (pz) * (sj2))));
                if (IKabs(dummyeval[0]) < 0.0000010000000000)
                {
                  {
                    IkReal dummyeval[1];
                    IkReal gconst0;
                    IkReal x65 = ((IkReal(0.755000000000000)) * (sj2));
                    IkReal x66 = ((cj0) * (px));
                    IkReal x67 = ((py) * (sj0));
                    IkReal x68 = ((IkReal(0.135000000000000)) * (cj2));
                    gconst0 = IKsign(
                        ((IkReal(0.0705000000000000)) + (((x65) * (x66))) + (((IkReal(-0.705000000000000)) * (x67))) +
                         (((x65) * (x67))) + (((IkReal(-0.755000000000000)) * (cj2) * (pz))) +
                         (((IkReal(-0.705000000000000)) * (x66))) + (((IkReal(-1.00000000000000)) * (x66) * (x68))) +
                         (((IkReal(-1.00000000000000)) * (x67) * (x68))) + (((IkReal(0.0135000000000000)) * (cj2))) +
                         (((IkReal(-0.135000000000000)) * (pz) * (sj2))) + (((IkReal(-0.0755000000000000)) * (sj2)))));
                    IkReal x69 = ((cj0) * (px));
                    IkReal x70 = ((IkReal(10.0000000000000)) * (cj2));
                    IkReal x71 = ((IkReal(55.9259259259259)) * (sj2));
                    IkReal x72 = ((py) * (sj0));
                    dummyeval[0] =
                        ((IkReal(5.22222222222222)) + (((IkReal(-1.00000000000000)) * (x70) * (x72))) +
                         (((x71) * (x72))) + (((IkReal(-52.2222222222222)) * (x72))) +
                         (((IkReal(-10.0000000000000)) * (pz) * (sj2))) + (cj2) +
                         (((IkReal(-52.2222222222222)) * (x69))) + (((IkReal(-1.00000000000000)) * (x69) * (x70))) +
                         (((IkReal(-5.59259259259259)) * (sj2))) + (((IkReal(-55.9259259259259)) * (cj2) * (pz))) +
                         (((x69) * (x71))));
                    if (IKabs(dummyeval[0]) < 0.0000010000000000)
                    {
                      continue;
                    }
                    else
                    {
                      {
                        IkReal j1array[1], cj1array[1], sj1array[1];
                        bool j1valid[1] = { false };
                        _nj1 = 1;
                        IkReal x73 = (sj2) * (sj2);
                        IkReal x74 = (cj2) * (cj2);
                        IkReal x75 = ((cj2) * (sj2));
                        IkReal x76 = ((IkReal(1.00000000000000)) * (pz));
                        if (IKabs(
                                ((gconst0) *
                                 (((IkReal(-0.497025000000000)) + (((IkReal(-0.190350000000000)) * (cj2))) +
                                   ((pz) * (pz)) + (((IkReal(1.06455000000000)) * (sj2))) +
                                   (((IkReal(0.203850000000000)) * (x75))) + (((IkReal(-0.570025000000000)) * (x73))) +
                                   (((IkReal(-0.0182250000000000)) * (x74))))))) < IKFAST_ATAN2_MAGTHRESH &&
                            IKabs((
                                (gconst0) *
                                (((((IkReal(0.101925000000000)) * (x73))) + (((IkReal(-0.101925000000000)) * (x74))) +
                                  (((IkReal(0.100000000000000)) * (pz))) + (((IkReal(0.551800000000000)) * (x75))) +
                                  (((IkReal(-1.00000000000000)) * (py) * (sj0) * (x76))) +
                                  (((IkReal(-0.532275000000000)) * (cj2))) + (((IkReal(-0.0951750000000000)) * (sj2))) +
                                  (((IkReal(-1.00000000000000)) * (cj0) * (px) * (x76))))))) < IKFAST_ATAN2_MAGTHRESH)
                          continue;
                        j1array[0] = IKatan2(
                            ((gconst0) *
                             (((IkReal(-0.497025000000000)) + (((IkReal(-0.190350000000000)) * (cj2))) + ((pz) * (pz)) +
                               (((IkReal(1.06455000000000)) * (sj2))) + (((IkReal(0.203850000000000)) * (x75))) +
                               (((IkReal(-0.570025000000000)) * (x73))) + (((IkReal(-0.0182250000000000)) * (x74)))))),
                            ((gconst0) *
                             (((((IkReal(0.101925000000000)) * (x73))) + (((IkReal(-0.101925000000000)) * (x74))) +
                               (((IkReal(0.100000000000000)) * (pz))) + (((IkReal(0.551800000000000)) * (x75))) +
                               (((IkReal(-1.00000000000000)) * (py) * (sj0) * (x76))) +
                               (((IkReal(-0.532275000000000)) * (cj2))) + (((IkReal(-0.0951750000000000)) * (sj2))) +
                               (((IkReal(-1.00000000000000)) * (cj0) * (px) * (x76)))))));
                        sj1array[0] = IKsin(j1array[0]);
                        cj1array[0] = IKcos(j1array[0]);
                        if (j1array[0] > IKPI)
                        {
                          j1array[0] -= IK2PI;
                        }
                        else if (j1array[0] < -IKPI)
                        {
                          j1array[0] += IK2PI;
                        }
                        j1valid[0] = true;
                        for (int ij1 = 0; ij1 < 1; ++ij1)
                        {
                          if (!j1valid[ij1])
                          {
                            continue;
                          }
                          _ij1[0] = ij1;
                          _ij1[1] = -1;
                          for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                          {
                            if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                            {
                              j1valid[iij1] = false;
                              _ij1[1] = iij1;
                              break;
                            }
                          }
                          j1 = j1array[ij1];
                          cj1 = cj1array[ij1];
                          sj1 = sj1array[ij1];
                          {
                            IkReal evalcond[5];
                            IkReal x77 = IKsin(j1);
                            IkReal x78 = IKcos(j1);
                            IkReal x79 = ((IkReal(0.135000000000000)) * (sj2));
                            IkReal x80 = ((cj0) * (px));
                            IkReal x81 = ((IkReal(0.755000000000000)) * (sj2));
                            IkReal x82 = ((py) * (sj0));
                            IkReal x83 = ((IkReal(0.755000000000000)) * (cj2));
                            IkReal x84 = ((IkReal(0.135000000000000)) * (cj2));
                            IkReal x85 = ((IkReal(0.135000000000000)) * (x78));
                            IkReal x86 = ((IkReal(1.00000000000000)) * (x78));
                            IkReal x87 = ((IkReal(1.41000000000000)) * (x77));
                            IkReal x88 = ((pz) * (x78));
                            evalcond[0] = ((IkReal(-0.705000000000000)) + (((x77) * (x80))) + (((x77) * (x82))) +
                                           (((IkReal(-0.100000000000000)) * (x77))) +
                                           (((IkReal(-1.00000000000000)) * (x84))) + (x88) + (x81));
                            evalcond[1] = ((((IkReal(0.100000000000000)) * (x78))) +
                                           (((IkReal(-1.00000000000000)) * (x80) * (x86))) + (x79) +
                                           (((IkReal(-1.00000000000000)) * (x82) * (x86))) + (x83) + (((pz) * (x77))));
                            evalcond[2] = ((((IkReal(-0.705000000000000)) * (x78))) +
                                           (((IkReal(-1.00000000000000)) * (x78) * (x84))) + (((x77) * (x79))) + (pz) +
                                           (((x78) * (x81))) + (((x77) * (x83))));
                            evalcond[3] =
                                ((IkReal(0.0812250000000000)) + (((IkReal(-0.141000000000000)) * (x77))) +
                                 (((IkReal(-1.00000000000000)) * (pp))) + (((x82) * (x87))) +
                                 (((IkReal(0.200000000000000)) * (x82))) + (((IkReal(1.41000000000000)) * (x88))) +
                                 (((x80) * (x87))) + (((IkReal(0.200000000000000)) * (x80))));
                            evalcond[4] =
                                ((IkReal(0.100000000000000)) + (((IkReal(-1.00000000000000)) * (x82))) +
                                 (((x77) * (x84))) + (((IkReal(-1.00000000000000)) * (x77) * (x81))) +
                                 (((x78) * (x83))) + (((x78) * (x79))) + (((IkReal(0.705000000000000)) * (x77))) +
                                 (((IkReal(-1.00000000000000)) * (x80))));
                            if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                                IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001 ||
                                IKabs(evalcond[4]) > 0.000001)
                            {
                              continue;
                            }
                          }

                          rotationfunction0(solutions);
                        }
                      }
                    }
                  }
                }
                else
                {
                  {
                    IkReal j1array[1], cj1array[1], sj1array[1];
                    bool j1valid[1] = { false };
                    _nj1 = 1;
                    IkReal x228 = (sj2) * (sj2);
                    IkReal x229 = (cj2) * (cj2);
                    IkReal x230 = ((cj2) * (sj2));
                    if (IKabs(((gconst1) *
                               (((((IkReal(0.551800000000000)) * (x230))) + (((IkReal(0.101925000000000)) * (x228))) +
                                 (((IkReal(-0.100000000000000)) * (pz))) + (((IkReal(-0.101925000000000)) * (x229))) +
                                 (((cj0) * (px) * (pz))) + (((IkReal(-0.532275000000000)) * (cj2))) +
                                 (((IkReal(-0.0951750000000000)) * (sj2))) + (((py) * (pz) * (sj0))))))) <
                            IKFAST_ATAN2_MAGTHRESH &&
                        IKabs(((gconst1) * (((((IkReal(-0.0182250000000000)) * (x228))) + ((pz) * (pz)) +
                                             (((IkReal(-0.203850000000000)) * (x230))) +
                                             (((IkReal(-0.570025000000000)) * (x229))))))) < IKFAST_ATAN2_MAGTHRESH)
                      continue;
                    j1array[0] =
                        IKatan2(((gconst1) *
                                 (((((IkReal(0.551800000000000)) * (x230))) + (((IkReal(0.101925000000000)) * (x228))) +
                                   (((IkReal(-0.100000000000000)) * (pz))) + (((IkReal(-0.101925000000000)) * (x229))) +
                                   (((cj0) * (px) * (pz))) + (((IkReal(-0.532275000000000)) * (cj2))) +
                                   (((IkReal(-0.0951750000000000)) * (sj2))) + (((py) * (pz) * (sj0)))))),
                                ((gconst1) * (((((IkReal(-0.0182250000000000)) * (x228))) + ((pz) * (pz)) +
                                               (((IkReal(-0.203850000000000)) * (x230))) +
                                               (((IkReal(-0.570025000000000)) * (x229)))))));
                    sj1array[0] = IKsin(j1array[0]);
                    cj1array[0] = IKcos(j1array[0]);
                    if (j1array[0] > IKPI)
                    {
                      j1array[0] -= IK2PI;
                    }
                    else if (j1array[0] < -IKPI)
                    {
                      j1array[0] += IK2PI;
                    }
                    j1valid[0] = true;
                    for (int ij1 = 0; ij1 < 1; ++ij1)
                    {
                      if (!j1valid[ij1])
                      {
                        continue;
                      }
                      _ij1[0] = ij1;
                      _ij1[1] = -1;
                      for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                      {
                        if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH &&
                            IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                        {
                          j1valid[iij1] = false;
                          _ij1[1] = iij1;
                          break;
                        }
                      }
                      j1 = j1array[ij1];
                      cj1 = cj1array[ij1];
                      sj1 = sj1array[ij1];
                      {
                        IkReal evalcond[5];
                        IkReal x231 = IKsin(j1);
                        IkReal x232 = IKcos(j1);
                        IkReal x233 = ((IkReal(0.135000000000000)) * (sj2));
                        IkReal x234 = ((cj0) * (px));
                        IkReal x235 = ((IkReal(0.755000000000000)) * (sj2));
                        IkReal x236 = ((py) * (sj0));
                        IkReal x237 = ((IkReal(0.755000000000000)) * (cj2));
                        IkReal x238 = ((IkReal(0.135000000000000)) * (cj2));
                        IkReal x239 = ((IkReal(0.135000000000000)) * (x232));
                        IkReal x240 = ((IkReal(1.00000000000000)) * (x232));
                        IkReal x241 = ((IkReal(1.41000000000000)) * (x231));
                        IkReal x242 = ((pz) * (x232));
                        evalcond[0] = ((IkReal(-0.705000000000000)) + (((IkReal(-1.00000000000000)) * (x238))) +
                                       (x235) + (((x231) * (x236))) + (x242) +
                                       (((IkReal(-0.100000000000000)) * (x231))) + (((x231) * (x234))));
                        evalcond[1] = ((((IkReal(0.100000000000000)) * (x232))) + (((pz) * (x231))) + (x233) + (x237) +
                                       (((IkReal(-1.00000000000000)) * (x234) * (x240))) +
                                       (((IkReal(-1.00000000000000)) * (x236) * (x240))));
                        evalcond[2] =
                            ((((IkReal(-0.705000000000000)) * (x232))) + (((x231) * (x237))) + (((x231) * (x233))) +
                             (pz) + (((x232) * (x235))) + (((IkReal(-1.00000000000000)) * (x232) * (x238))));
                        evalcond[3] =
                            ((IkReal(0.0812250000000000)) + (((x236) * (x241))) +
                             (((IkReal(0.200000000000000)) * (x236))) + (((IkReal(0.200000000000000)) * (x234))) +
                             (((IkReal(-1.00000000000000)) * (pp))) + (((x234) * (x241))) +
                             (((IkReal(1.41000000000000)) * (x242))) + (((IkReal(-0.141000000000000)) * (x231))));
                        evalcond[4] =
                            ((IkReal(0.100000000000000)) + (((IkReal(-1.00000000000000)) * (x231) * (x235))) +
                             (((IkReal(0.705000000000000)) * (x231))) + (((IkReal(-1.00000000000000)) * (x236))) +
                             (((x231) * (x238))) + (((x232) * (x233))) + (((x232) * (x237))) +
                             (((IkReal(-1.00000000000000)) * (x234))));
                        if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                            IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001 ||
                            IKabs(evalcond[4]) > 0.000001)
                        {
                          continue;
                        }
                      }

                      rotationfunction0(solutions);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return solutions.GetNumSolutions() > 0;
  }
  inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions)
  {
    for (int rotationiter = 0; rotationiter < 1; ++rotationiter)
    {
      IkReal x89 = ((cj0) * (r00));
      IkReal x90 = ((cj0) * (r01));
      IkReal x91 = ((sj1) * (sj2));
      IkReal x92 = ((IkReal(1.00000000000000)) * (sj0));
      IkReal x93 = ((r10) * (sj0));
      IkReal x94 = ((IkReal(1.00000000000000)) * (cj2));
      IkReal x95 = ((r12) * (sj0));
      IkReal x96 = ((cj0) * (r02));
      IkReal x97 = ((r11) * (sj0));
      IkReal x98 = ((((IkReal(-1.00000000000000)) * (cj1) * (x94))) + (x91));
      IkReal x99 = ((((IkReal(-1.00000000000000)) * (x91))) + (((cj1) * (cj2))));
      IkReal x100 = ((cj0) * (x99));
      IkReal x101 = ((((IkReal(-1.00000000000000)) * (sj1) * (x94))) + (((IkReal(-1.00000000000000)) * (cj1) * (sj2))));
      IkReal x102 = ((sj0) * (x101));
      new_r00 = ((((r20) * (x98))) + (((x101) * (x89))) + (((x101) * (x93))));
      new_r01 = ((((x101) * (x90))) + (((x101) * (x97))) + (((r21) * (x98))));
      new_r02 = ((((x101) * (x95))) + (((r22) * (x98))) + (((x101) * (x96))));
      new_r10 = ((((IkReal(-1.00000000000000)) * (r00) * (x92))) + (((cj0) * (r10))));
      new_r11 = ((((IkReal(-1.00000000000000)) * (r01) * (x92))) + (((cj0) * (r11))));
      new_r12 = ((((IkReal(-1.00000000000000)) * (r02) * (x92))) + (((cj0) * (r12))));
      new_r20 = ((((x93) * (x99))) + (((x89) * (x99))) + (((r20) * (x101))));
      new_r21 = ((((r21) * (x101))) + (((x97) * (x99))) + (((x90) * (x99))));
      new_r22 = ((((x96) * (x99))) + (((r22) * (x101))) + (((x95) * (x99))));
      {
        IkReal j4array[2], cj4array[2], sj4array[2];
        bool j4valid[2] = { false };
        _nj4 = 2;
        cj4array[0] = new_r22;
        if (cj4array[0] >= -1 - IKFAST_SINCOS_THRESH && cj4array[0] <= 1 + IKFAST_SINCOS_THRESH)
        {
          j4valid[0] = j4valid[1] = true;
          j4array[0] = IKacos(cj4array[0]);
          sj4array[0] = IKsin(j4array[0]);
          cj4array[1] = cj4array[0];
          j4array[1] = -j4array[0];
          sj4array[1] = -sj4array[0];
        }
        else if (isnan(cj4array[0]))
        {
          // probably any value will work
          j4valid[0] = true;
          cj4array[0] = 1;
          sj4array[0] = 0;
          j4array[0] = 0;
        }
        for (int ij4 = 0; ij4 < 2; ++ij4)
        {
          if (!j4valid[ij4])
          {
            continue;
          }
          _ij4[0] = ij4;
          _ij4[1] = -1;
          for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
          {
            if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
            {
              j4valid[iij4] = false;
              _ij4[1] = iij4;
              break;
            }
          }
          j4 = j4array[ij4];
          cj4 = cj4array[ij4];
          sj4 = sj4array[ij4];

          {
            IkReal dummyeval[1];
            IkReal gconst4;
            gconst4 = IKsign(sj4);
            dummyeval[0] = sj4;
            if (IKabs(dummyeval[0]) < 0.0000010000000000)
            {
              {
                IkReal dummyeval[1];
                IkReal gconst2;
                gconst2 = IKsign((((new_r12) * (new_r12)) + ((new_r02) * (new_r02))));
                dummyeval[0] = (((new_r12) * (new_r12)) + ((new_r02) * (new_r02)));
                if (IKabs(dummyeval[0]) < 0.0000010000000000)
                {
                  {
                    IkReal dummyeval[1];
                    IkReal gconst3;
                    gconst3 = IKsign(((((new_r10) * (new_r12) * (sj4))) + (((new_r00) * (new_r02) * (sj4)))));
                    dummyeval[0] = ((((new_r10) * (new_r12) * (sj4))) + (((new_r00) * (new_r02) * (sj4))));
                    if (IKabs(dummyeval[0]) < 0.0000010000000000)
                    {
                      {
                        IkReal evalcond[7];
                        IkReal x103 = ((IkReal(-1.00000000000000)) + (new_r22));
                        evalcond[0] = ((IkReal(-3.14159265358979)) +
                                       (IKfmod(((IkReal(3.14159265358979)) + (j4)), IkReal(6.28318530717959))));
                        evalcond[1] = x103;
                        evalcond[2] = new_r20;
                        evalcond[3] = new_r21;
                        evalcond[4] = new_r20;
                        evalcond[5] = new_r21;
                        evalcond[6] = x103;
                        if (IKabs(evalcond[0]) < 0.0000010000000000 && IKabs(evalcond[1]) < 0.0000010000000000 &&
                            IKabs(evalcond[2]) < 0.0000010000000000 && IKabs(evalcond[3]) < 0.0000010000000000 &&
                            IKabs(evalcond[4]) < 0.0000010000000000 && IKabs(evalcond[5]) < 0.0000010000000000 &&
                            IKabs(evalcond[6]) < 0.0000010000000000)
                        {
                          {
                            IkReal j3array[2], cj3array[2], sj3array[2];
                            bool j3valid[2] = { false };
                            _nj3 = 2;
                            if (IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH)
                              continue;
                            IkReal x104 = IKatan2(new_r02, new_r12);
                            j3array[0] = ((IkReal(-1.00000000000000)) * (x104));
                            sj3array[0] = IKsin(j3array[0]);
                            cj3array[0] = IKcos(j3array[0]);
                            j3array[1] = ((IkReal(3.14159265358979)) + (((IkReal(-1.00000000000000)) * (x104))));
                            sj3array[1] = IKsin(j3array[1]);
                            cj3array[1] = IKcos(j3array[1]);
                            if (j3array[0] > IKPI)
                            {
                              j3array[0] -= IK2PI;
                            }
                            else if (j3array[0] < -IKPI)
                            {
                              j3array[0] += IK2PI;
                            }
                            j3valid[0] = true;
                            if (j3array[1] > IKPI)
                            {
                              j3array[1] -= IK2PI;
                            }
                            else if (j3array[1] < -IKPI)
                            {
                              j3array[1] += IK2PI;
                            }
                            j3valid[1] = true;
                            for (int ij3 = 0; ij3 < 2; ++ij3)
                            {
                              if (!j3valid[ij3])
                              {
                                continue;
                              }
                              _ij3[0] = ij3;
                              _ij3[1] = -1;
                              for (int iij3 = ij3 + 1; iij3 < 2; ++iij3)
                              {
                                if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                {
                                  j3valid[iij3] = false;
                                  _ij3[1] = iij3;
                                  break;
                                }
                              }
                              j3 = j3array[ij3];
                              cj3 = cj3array[ij3];
                              sj3 = sj3array[ij3];
                              {
                                IkReal evalcond[1];
                                evalcond[0] = ((((new_r12) * (IKcos(j3)))) +
                                               (((IkReal(-1.00000000000000)) * (new_r02) * (IKsin(j3)))));
                                if (IKabs(evalcond[0]) > 0.000001)
                                {
                                  continue;
                                }
                              }

                              {
                                IkReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1] = { false };
                                _nj5 = 1;
                                if (IKabs(((((IkReal(-1.00000000000000)) * (new_r11) * (sj3))) +
                                           (((IkReal(-1.00000000000000)) * (cj3) * (new_r01))))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(((((new_r10) * (sj3))) + (((cj3) * (new_r00))))) < IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(IKsqr(((((IkReal(-1.00000000000000)) * (new_r11) * (sj3))) +
                                                 (((IkReal(-1.00000000000000)) * (cj3) * (new_r01))))) +
                                          IKsqr(((((new_r10) * (sj3))) + (((cj3) * (new_r00))))) - 1) <=
                                        IKFAST_SINCOS_THRESH)
                                  continue;
                                j5array[0] = IKatan2(((((IkReal(-1.00000000000000)) * (new_r11) * (sj3))) +
                                                      (((IkReal(-1.00000000000000)) * (cj3) * (new_r01)))),
                                                     ((((new_r10) * (sj3))) + (((cj3) * (new_r00)))));
                                sj5array[0] = IKsin(j5array[0]);
                                cj5array[0] = IKcos(j5array[0]);
                                if (j5array[0] > IKPI)
                                {
                                  j5array[0] -= IK2PI;
                                }
                                else if (j5array[0] < -IKPI)
                                {
                                  j5array[0] += IK2PI;
                                }
                                j5valid[0] = true;
                                for (int ij5 = 0; ij5 < 1; ++ij5)
                                {
                                  if (!j5valid[ij5])
                                  {
                                    continue;
                                  }
                                  _ij5[0] = ij5;
                                  _ij5[1] = -1;
                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                  {
                                    if (j5valid[iij5] &&
                                        IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                    {
                                      j5valid[iij5] = false;
                                      _ij5[1] = iij5;
                                      break;
                                    }
                                  }
                                  j5 = j5array[ij5];
                                  cj5 = cj5array[ij5];
                                  sj5 = sj5array[ij5];
                                  {
                                    IkReal evalcond[4];
                                    IkReal x105 = IKsin(j5);
                                    IkReal x106 = ((IkReal(1.00000000000000)) * (sj3));
                                    IkReal x107 = ((IkReal(1.00000000000000)) * (IKcos(j5)));
                                    evalcond[0] = ((((IkReal(-1.00000000000000)) * (new_r00) * (x106))) +
                                                   (((cj3) * (new_r10))) + (((IkReal(-1.00000000000000)) * (x105))));
                                    evalcond[1] = ((((IkReal(-1.00000000000000)) * (x107))) + (((cj3) * (new_r11))) +
                                                   (((IkReal(-1.00000000000000)) * (new_r01) * (x106))));
                                    evalcond[2] = ((((new_r11) * (sj3))) + (x105) + (((cj3) * (new_r01))));
                                    evalcond[3] = ((((IkReal(-1.00000000000000)) * (x107))) + (((new_r10) * (sj3))) +
                                                   (((cj3) * (new_r00))));
                                    if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                                        IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001)
                                    {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j0;
                                    vinfos[0].indices[0] = _ij0[0];
                                    vinfos[0].indices[1] = _ij0[1];
                                    vinfos[0].maxsolutions = _nj0;
                                    vinfos[1].jointtype = 1;
                                    vinfos[1].foffset = j1;
                                    vinfos[1].indices[0] = _ij1[0];
                                    vinfos[1].indices[1] = _ij1[1];
                                    vinfos[1].maxsolutions = _nj1;
                                    vinfos[2].jointtype = 1;
                                    vinfos[2].foffset = j2;
                                    vinfos[2].indices[0] = _ij2[0];
                                    vinfos[2].indices[1] = _ij2[1];
                                    vinfos[2].maxsolutions = _nj2;
                                    vinfos[3].jointtype = 1;
                                    vinfos[3].foffset = j3;
                                    vinfos[3].indices[0] = _ij3[0];
                                    vinfos[3].indices[1] = _ij3[1];
                                    vinfos[3].maxsolutions = _nj3;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j4;
                                    vinfos[4].indices[0] = _ij4[0];
                                    vinfos[4].indices[1] = _ij4[1];
                                    vinfos[4].maxsolutions = _nj4;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j5;
                                    vinfos[5].indices[0] = _ij5[0];
                                    vinfos[5].indices[1] = _ij5[1];
                                    vinfos[5].maxsolutions = _nj5;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          evalcond[0] = ((IkReal(-3.14159265358979)) + (IKfmod(j4, IkReal(6.28318530717959))));
                          evalcond[1] = ((IkReal(1.00000000000000)) + (new_r22));
                          evalcond[2] = new_r20;
                          evalcond[3] = new_r21;
                          evalcond[4] = ((IkReal(-1.00000000000000)) * (new_r20));
                          evalcond[5] = ((IkReal(-1.00000000000000)) * (new_r21));
                          evalcond[6] = ((IkReal(-1.00000000000000)) + (((IkReal(-1.00000000000000)) * (new_r22))));
                          if (IKabs(evalcond[0]) < 0.0000010000000000 && IKabs(evalcond[1]) < 0.0000010000000000 &&
                              IKabs(evalcond[2]) < 0.0000010000000000 && IKabs(evalcond[3]) < 0.0000010000000000 &&
                              IKabs(evalcond[4]) < 0.0000010000000000 && IKabs(evalcond[5]) < 0.0000010000000000 &&
                              IKabs(evalcond[6]) < 0.0000010000000000)
                          {
                            {
                              IkReal j3array[2], cj3array[2], sj3array[2];
                              bool j3valid[2] = { false };
                              _nj3 = 2;
                              if (IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH)
                                continue;
                              IkReal x108 = IKatan2(new_r02, new_r12);
                              j3array[0] = ((IkReal(-1.00000000000000)) * (x108));
                              sj3array[0] = IKsin(j3array[0]);
                              cj3array[0] = IKcos(j3array[0]);
                              j3array[1] = ((IkReal(3.14159265358979)) + (((IkReal(-1.00000000000000)) * (x108))));
                              sj3array[1] = IKsin(j3array[1]);
                              cj3array[1] = IKcos(j3array[1]);
                              if (j3array[0] > IKPI)
                              {
                                j3array[0] -= IK2PI;
                              }
                              else if (j3array[0] < -IKPI)
                              {
                                j3array[0] += IK2PI;
                              }
                              j3valid[0] = true;
                              if (j3array[1] > IKPI)
                              {
                                j3array[1] -= IK2PI;
                              }
                              else if (j3array[1] < -IKPI)
                              {
                                j3array[1] += IK2PI;
                              }
                              j3valid[1] = true;
                              for (int ij3 = 0; ij3 < 2; ++ij3)
                              {
                                if (!j3valid[ij3])
                                {
                                  continue;
                                }
                                _ij3[0] = ij3;
                                _ij3[1] = -1;
                                for (int iij3 = ij3 + 1; iij3 < 2; ++iij3)
                                {
                                  if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                                      IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                  {
                                    j3valid[iij3] = false;
                                    _ij3[1] = iij3;
                                    break;
                                  }
                                }
                                j3 = j3array[ij3];
                                cj3 = cj3array[ij3];
                                sj3 = sj3array[ij3];
                                {
                                  IkReal evalcond[1];
                                  evalcond[0] = ((((new_r12) * (IKcos(j3)))) +
                                                 (((IkReal(-1.00000000000000)) * (new_r02) * (IKsin(j3)))));
                                  if (IKabs(evalcond[0]) > 0.000001)
                                  {
                                    continue;
                                  }
                                }

                                {
                                  IkReal j5array[1], cj5array[1], sj5array[1];
                                  bool j5valid[1] = { false };
                                  _nj5 = 1;
                                  if (IKabs(((((new_r11) * (sj3))) + (((cj3) * (new_r01))))) < IKFAST_ATAN2_MAGTHRESH &&
                                      IKabs(((((IkReal(-1.00000000000000)) * (cj3) * (new_r00))) +
                                             (((IkReal(-1.00000000000000)) * (new_r10) * (sj3))))) <
                                          IKFAST_ATAN2_MAGTHRESH &&
                                      IKabs(IKsqr(((((new_r11) * (sj3))) + (((cj3) * (new_r01))))) +
                                            IKsqr(((((IkReal(-1.00000000000000)) * (cj3) * (new_r00))) +
                                                   (((IkReal(-1.00000000000000)) * (new_r10) * (sj3))))) -
                                            1) <= IKFAST_SINCOS_THRESH)
                                    continue;
                                  j5array[0] = IKatan2(((((new_r11) * (sj3))) + (((cj3) * (new_r01)))),
                                                       ((((IkReal(-1.00000000000000)) * (cj3) * (new_r00))) +
                                                        (((IkReal(-1.00000000000000)) * (new_r10) * (sj3)))));
                                  sj5array[0] = IKsin(j5array[0]);
                                  cj5array[0] = IKcos(j5array[0]);
                                  if (j5array[0] > IKPI)
                                  {
                                    j5array[0] -= IK2PI;
                                  }
                                  else if (j5array[0] < -IKPI)
                                  {
                                    j5array[0] += IK2PI;
                                  }
                                  j5valid[0] = true;
                                  for (int ij5 = 0; ij5 < 1; ++ij5)
                                  {
                                    if (!j5valid[ij5])
                                    {
                                      continue;
                                    }
                                    _ij5[0] = ij5;
                                    _ij5[1] = -1;
                                    for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                    {
                                      if (j5valid[iij5] &&
                                          IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                          IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                      {
                                        j5valid[iij5] = false;
                                        _ij5[1] = iij5;
                                        break;
                                      }
                                    }
                                    j5 = j5array[ij5];
                                    cj5 = cj5array[ij5];
                                    sj5 = sj5array[ij5];
                                    {
                                      IkReal evalcond[4];
                                      IkReal x109 = IKcos(j5);
                                      IkReal x110 = ((IkReal(1.00000000000000)) * (sj3));
                                      IkReal x111 = ((IkReal(1.00000000000000)) * (IKsin(j5)));
                                      evalcond[0] = ((((IkReal(-1.00000000000000)) * (new_r00) * (x110))) +
                                                     (((IkReal(-1.00000000000000)) * (x111))) + (((cj3) * (new_r10))));
                                      evalcond[1] = ((((IkReal(-1.00000000000000)) * (x109))) +
                                                     (((IkReal(-1.00000000000000)) * (new_r01) * (x110))) +
                                                     (((cj3) * (new_r11))));
                                      evalcond[2] = ((((new_r11) * (sj3))) + (((IkReal(-1.00000000000000)) * (x111))) +
                                                     (((cj3) * (new_r01))));
                                      evalcond[3] = ((((new_r10) * (sj3))) + (x109) + (((cj3) * (new_r00))));
                                      if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                                          IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001)
                                      {
                                        continue;
                                      }
                                    }

                                    {
                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                      vinfos[0].jointtype = 1;
                                      vinfos[0].foffset = j0;
                                      vinfos[0].indices[0] = _ij0[0];
                                      vinfos[0].indices[1] = _ij0[1];
                                      vinfos[0].maxsolutions = _nj0;
                                      vinfos[1].jointtype = 1;
                                      vinfos[1].foffset = j1;
                                      vinfos[1].indices[0] = _ij1[0];
                                      vinfos[1].indices[1] = _ij1[1];
                                      vinfos[1].maxsolutions = _nj1;
                                      vinfos[2].jointtype = 1;
                                      vinfos[2].foffset = j2;
                                      vinfos[2].indices[0] = _ij2[0];
                                      vinfos[2].indices[1] = _ij2[1];
                                      vinfos[2].maxsolutions = _nj2;
                                      vinfos[3].jointtype = 1;
                                      vinfos[3].foffset = j3;
                                      vinfos[3].indices[0] = _ij3[0];
                                      vinfos[3].indices[1] = _ij3[1];
                                      vinfos[3].maxsolutions = _nj3;
                                      vinfos[4].jointtype = 1;
                                      vinfos[4].foffset = j4;
                                      vinfos[4].indices[0] = _ij4[0];
                                      vinfos[4].indices[1] = _ij4[1];
                                      vinfos[4].maxsolutions = _nj4;
                                      vinfos[5].jointtype = 1;
                                      vinfos[5].foffset = j5;
                                      vinfos[5].indices[0] = _ij5[0];
                                      vinfos[5].indices[1] = _ij5[1];
                                      vinfos[5].maxsolutions = _nj5;
                                      std::vector<int> vfree(0);
                                      solutions.AddSolution(vinfos, vfree);
                                    }
                                  }
                                }
                              }
                            }
                          }
                          else
                          {
                            if (1)
                            {
                              continue;
                            }
                            else
                            {
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      {
                        IkReal j3array[1], cj3array[1], sj3array[1];
                        bool j3valid[1] = { false };
                        _nj3 = 1;
                        IkReal x112 = ((IkReal(-1.00000000000000)) * (cj4) * (gconst3) * (new_r20));
                        if (IKabs(((new_r12) * (x112))) < IKFAST_ATAN2_MAGTHRESH &&
                            IKabs(((new_r02) * (x112))) < IKFAST_ATAN2_MAGTHRESH)
                          continue;
                        j3array[0] = IKatan2(((new_r12) * (x112)), ((new_r02) * (x112)));
                        sj3array[0] = IKsin(j3array[0]);
                        cj3array[0] = IKcos(j3array[0]);
                        if (j3array[0] > IKPI)
                        {
                          j3array[0] -= IK2PI;
                        }
                        else if (j3array[0] < -IKPI)
                        {
                          j3array[0] += IK2PI;
                        }
                        j3valid[0] = true;
                        for (int ij3 = 0; ij3 < 1; ++ij3)
                        {
                          if (!j3valid[ij3])
                          {
                            continue;
                          }
                          _ij3[0] = ij3;
                          _ij3[1] = -1;
                          for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                          {
                            if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                            {
                              j3valid[iij3] = false;
                              _ij3[1] = iij3;
                              break;
                            }
                          }
                          j3 = j3array[ij3];
                          cj3 = cj3array[ij3];
                          sj3 = sj3array[ij3];
                          {
                            IkReal evalcond[6];
                            IkReal x113 = IKsin(j3);
                            IkReal x114 = IKcos(j3);
                            IkReal x115 = ((IkReal(1.00000000000000)) * (sj4));
                            IkReal x116 = ((sj4) * (x113));
                            IkReal x117 = ((sj4) * (x114));
                            IkReal x118 = ((new_r02) * (x114));
                            IkReal x119 = ((new_r12) * (x113));
                            evalcond[0] =
                                ((((IkReal(-1.00000000000000)) * (new_r02) * (x113))) + (((new_r12) * (x114))));
                            evalcond[1] = ((((IkReal(-1.00000000000000)) * (x115))) + (x119) + (x118));
                            evalcond[2] = ((((new_r00) * (x117))) + (((cj4) * (new_r20))) + (((new_r10) * (x116))));
                            evalcond[3] = ((((new_r11) * (x116))) + (((new_r01) * (x117))) + (((cj4) * (new_r21))));
                            evalcond[4] = ((IkReal(-1.00000000000000)) + (((new_r02) * (x117))) +
                                           (((new_r12) * (x116))) + (((cj4) * (new_r22))));
                            evalcond[5] = ((((cj4) * (x118))) + (((cj4) * (x119))) +
                                           (((IkReal(-1.00000000000000)) * (new_r22) * (x115))));
                            if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                                IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001 ||
                                IKabs(evalcond[4]) > 0.000001 || IKabs(evalcond[5]) > 0.000001)
                            {
                              continue;
                            }
                          }

                          {
                            IkReal dummyeval[1];
                            IkReal gconst5;
                            gconst5 = IKsign(sj4);
                            dummyeval[0] = sj4;
                            if (IKabs(dummyeval[0]) < 0.0000010000000000)
                            {
                              {
                                IkReal dummyeval[1];
                                dummyeval[0] = sj4;
                                if (IKabs(dummyeval[0]) < 0.0000010000000000)
                                {
                                  {
                                    IkReal dummyeval[1];
                                    dummyeval[0] = sj4;
                                    if (IKabs(dummyeval[0]) < 0.0000010000000000)
                                    {
                                      {
                                        IkReal evalcond[11];
                                        IkReal x120 = ((IkReal(-1.00000000000000)) + (new_r22));
                                        IkReal x121 = ((((cj3) * (new_r12))) +
                                                       (((IkReal(-1.00000000000000)) * (new_r02) * (sj3))));
                                        IkReal x122 = ((((new_r12) * (sj3))) + (((cj3) * (new_r02))));
                                        evalcond[0] =
                                            ((IkReal(-3.14159265358979)) +
                                             (IKfmod(((IkReal(3.14159265358979)) + (j4)), IkReal(6.28318530717959))));
                                        evalcond[1] = x120;
                                        evalcond[2] = new_r20;
                                        evalcond[3] = new_r21;
                                        evalcond[4] = x121;
                                        evalcond[5] = x121;
                                        evalcond[6] = x122;
                                        evalcond[7] = new_r20;
                                        evalcond[8] = new_r21;
                                        evalcond[9] = x120;
                                        evalcond[10] = x122;
                                        if (IKabs(evalcond[0]) < 0.0000010000000000 &&
                                            IKabs(evalcond[1]) < 0.0000010000000000 &&
                                            IKabs(evalcond[2]) < 0.0000010000000000 &&
                                            IKabs(evalcond[3]) < 0.0000010000000000 &&
                                            IKabs(evalcond[4]) < 0.0000010000000000 &&
                                            IKabs(evalcond[5]) < 0.0000010000000000 &&
                                            IKabs(evalcond[6]) < 0.0000010000000000 &&
                                            IKabs(evalcond[7]) < 0.0000010000000000 &&
                                            IKabs(evalcond[8]) < 0.0000010000000000 &&
                                            IKabs(evalcond[9]) < 0.0000010000000000 &&
                                            IKabs(evalcond[10]) < 0.0000010000000000)
                                        {
                                          {
                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1] = { false };
                                            _nj5 = 1;
                                            if (IKabs(((((IkReal(-1.00000000000000)) * (new_r11) * (sj3))) +
                                                       (((IkReal(-1.00000000000000)) * (cj3) * (new_r01))))) <
                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs(((((new_r10) * (sj3))) + (((cj3) * (new_r00))))) <
                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs(IKsqr(((((IkReal(-1.00000000000000)) * (new_r11) * (sj3))) +
                                                             (((IkReal(-1.00000000000000)) * (cj3) * (new_r01))))) +
                                                      IKsqr(((((new_r10) * (sj3))) + (((cj3) * (new_r00))))) - 1) <=
                                                    IKFAST_SINCOS_THRESH)
                                              continue;
                                            j5array[0] = IKatan2(((((IkReal(-1.00000000000000)) * (new_r11) * (sj3))) +
                                                                  (((IkReal(-1.00000000000000)) * (cj3) * (new_r01)))),
                                                                 ((((new_r10) * (sj3))) + (((cj3) * (new_r00)))));
                                            sj5array[0] = IKsin(j5array[0]);
                                            cj5array[0] = IKcos(j5array[0]);
                                            if (j5array[0] > IKPI)
                                            {
                                              j5array[0] -= IK2PI;
                                            }
                                            else if (j5array[0] < -IKPI)
                                            {
                                              j5array[0] += IK2PI;
                                            }
                                            j5valid[0] = true;
                                            for (int ij5 = 0; ij5 < 1; ++ij5)
                                            {
                                              if (!j5valid[ij5])
                                              {
                                                continue;
                                              }
                                              _ij5[0] = ij5;
                                              _ij5[1] = -1;
                                              for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                              {
                                                if (j5valid[iij5] &&
                                                    IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                                    IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                {
                                                  j5valid[iij5] = false;
                                                  _ij5[1] = iij5;
                                                  break;
                                                }
                                              }
                                              j5 = j5array[ij5];
                                              cj5 = cj5array[ij5];
                                              sj5 = sj5array[ij5];
                                              {
                                                IkReal evalcond[4];
                                                IkReal x123 = IKsin(j5);
                                                IkReal x124 = ((IkReal(1.00000000000000)) * (sj3));
                                                IkReal x125 = ((IkReal(1.00000000000000)) * (IKcos(j5)));
                                                evalcond[0] = ((((IkReal(-1.00000000000000)) * (x123))) +
                                                               (((IkReal(-1.00000000000000)) * (new_r00) * (x124))) +
                                                               (((cj3) * (new_r10))));
                                                evalcond[1] =
                                                    ((((IkReal(-1.00000000000000)) * (new_r01) * (x124))) +
                                                     (((cj3) * (new_r11))) + (((IkReal(-1.00000000000000)) * (x125))));
                                                evalcond[2] = ((((new_r11) * (sj3))) + (x123) + (((cj3) * (new_r01))));
                                                evalcond[3] =
                                                    ((((new_r10) * (sj3))) + (((IkReal(-1.00000000000000)) * (x125))) +
                                                     (((cj3) * (new_r00))));
                                                if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                                                    IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001)
                                                {
                                                  continue;
                                                }
                                              }

                                              {
                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                vinfos[0].jointtype = 1;
                                                vinfos[0].foffset = j0;
                                                vinfos[0].indices[0] = _ij0[0];
                                                vinfos[0].indices[1] = _ij0[1];
                                                vinfos[0].maxsolutions = _nj0;
                                                vinfos[1].jointtype = 1;
                                                vinfos[1].foffset = j1;
                                                vinfos[1].indices[0] = _ij1[0];
                                                vinfos[1].indices[1] = _ij1[1];
                                                vinfos[1].maxsolutions = _nj1;
                                                vinfos[2].jointtype = 1;
                                                vinfos[2].foffset = j2;
                                                vinfos[2].indices[0] = _ij2[0];
                                                vinfos[2].indices[1] = _ij2[1];
                                                vinfos[2].maxsolutions = _nj2;
                                                vinfos[3].jointtype = 1;
                                                vinfos[3].foffset = j3;
                                                vinfos[3].indices[0] = _ij3[0];
                                                vinfos[3].indices[1] = _ij3[1];
                                                vinfos[3].maxsolutions = _nj3;
                                                vinfos[4].jointtype = 1;
                                                vinfos[4].foffset = j4;
                                                vinfos[4].indices[0] = _ij4[0];
                                                vinfos[4].indices[1] = _ij4[1];
                                                vinfos[4].maxsolutions = _nj4;
                                                vinfos[5].jointtype = 1;
                                                vinfos[5].foffset = j5;
                                                vinfos[5].indices[0] = _ij5[0];
                                                vinfos[5].indices[1] = _ij5[1];
                                                vinfos[5].maxsolutions = _nj5;
                                                std::vector<int> vfree(0);
                                                solutions.AddSolution(vinfos, vfree);
                                              }
                                            }
                                          }
                                        }
                                        else
                                        {
                                          IkReal x126 = ((new_r12) * (sj3));
                                          IkReal x127 = ((IkReal(1.00000000000000)) * (new_r02));
                                          IkReal x128 = ((((IkReal(-1.00000000000000)) * (sj3) * (x127))) +
                                                         (((cj3) * (new_r12))));
                                          evalcond[0] =
                                              ((IkReal(-3.14159265358979)) + (IKfmod(j4, IkReal(6.28318530717959))));
                                          evalcond[1] = ((IkReal(1.00000000000000)) + (new_r22));
                                          evalcond[2] = new_r20;
                                          evalcond[3] = new_r21;
                                          evalcond[4] = x128;
                                          evalcond[5] = x128;
                                          evalcond[6] = ((x126) + (((cj3) * (new_r02))));
                                          evalcond[7] = ((IkReal(-1.00000000000000)) * (new_r20));
                                          evalcond[8] = ((IkReal(-1.00000000000000)) * (new_r21));
                                          evalcond[9] = ((IkReal(-1.00000000000000)) +
                                                         (((IkReal(-1.00000000000000)) * (new_r22))));
                                          evalcond[10] = ((((IkReal(-1.00000000000000)) * (cj3) * (x127))) +
                                                          (((IkReal(-1.00000000000000)) * (x126))));
                                          if (IKabs(evalcond[0]) < 0.0000010000000000 &&
                                              IKabs(evalcond[1]) < 0.0000010000000000 &&
                                              IKabs(evalcond[2]) < 0.0000010000000000 &&
                                              IKabs(evalcond[3]) < 0.0000010000000000 &&
                                              IKabs(evalcond[4]) < 0.0000010000000000 &&
                                              IKabs(evalcond[5]) < 0.0000010000000000 &&
                                              IKabs(evalcond[6]) < 0.0000010000000000 &&
                                              IKabs(evalcond[7]) < 0.0000010000000000 &&
                                              IKabs(evalcond[8]) < 0.0000010000000000 &&
                                              IKabs(evalcond[9]) < 0.0000010000000000 &&
                                              IKabs(evalcond[10]) < 0.0000010000000000)
                                          {
                                            {
                                              IkReal j5array[1], cj5array[1], sj5array[1];
                                              bool j5valid[1] = { false };
                                              _nj5 = 1;
                                              if (IKabs(((((new_r11) * (sj3))) + (((cj3) * (new_r01))))) <
                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs(((((IkReal(-1.00000000000000)) * (cj3) * (new_r00))) +
                                                         (((IkReal(-1.00000000000000)) * (new_r10) * (sj3))))) <
                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs(IKsqr(((((new_r11) * (sj3))) + (((cj3) * (new_r01))))) +
                                                        IKsqr(((((IkReal(-1.00000000000000)) * (cj3) * (new_r00))) +
                                                               (((IkReal(-1.00000000000000)) * (new_r10) * (sj3))))) -
                                                        1) <= IKFAST_SINCOS_THRESH)
                                                continue;
                                              j5array[0] =
                                                  IKatan2(((((new_r11) * (sj3))) + (((cj3) * (new_r01)))),
                                                          ((((IkReal(-1.00000000000000)) * (cj3) * (new_r00))) +
                                                           (((IkReal(-1.00000000000000)) * (new_r10) * (sj3)))));
                                              sj5array[0] = IKsin(j5array[0]);
                                              cj5array[0] = IKcos(j5array[0]);
                                              if (j5array[0] > IKPI)
                                              {
                                                j5array[0] -= IK2PI;
                                              }
                                              else if (j5array[0] < -IKPI)
                                              {
                                                j5array[0] += IK2PI;
                                              }
                                              j5valid[0] = true;
                                              for (int ij5 = 0; ij5 < 1; ++ij5)
                                              {
                                                if (!j5valid[ij5])
                                                {
                                                  continue;
                                                }
                                                _ij5[0] = ij5;
                                                _ij5[1] = -1;
                                                for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                {
                                                  if (j5valid[iij5] &&
                                                      IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                  {
                                                    j5valid[iij5] = false;
                                                    _ij5[1] = iij5;
                                                    break;
                                                  }
                                                }
                                                j5 = j5array[ij5];
                                                cj5 = cj5array[ij5];
                                                sj5 = sj5array[ij5];
                                                {
                                                  IkReal evalcond[4];
                                                  IkReal x129 = IKcos(j5);
                                                  IkReal x130 = ((IkReal(1.00000000000000)) * (sj3));
                                                  IkReal x131 = ((IkReal(1.00000000000000)) * (IKsin(j5)));
                                                  evalcond[0] = ((((IkReal(-1.00000000000000)) * (x131))) +
                                                                 (((IkReal(-1.00000000000000)) * (new_r00) * (x130))) +
                                                                 (((cj3) * (new_r10))));
                                                  evalcond[1] = ((((IkReal(-1.00000000000000)) * (x129))) +
                                                                 (((cj3) * (new_r11))) +
                                                                 (((IkReal(-1.00000000000000)) * (new_r01) * (x130))));
                                                  evalcond[2] = ((((IkReal(-1.00000000000000)) * (x131))) +
                                                                 (((new_r11) * (sj3))) + (((cj3) * (new_r01))));
                                                  evalcond[3] =
                                                      ((x129) + (((new_r10) * (sj3))) + (((cj3) * (new_r00))));
                                                  if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                                                      IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001)
                                                  {
                                                    continue;
                                                  }
                                                }

                                                {
                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                                  vinfos[0].jointtype = 1;
                                                  vinfos[0].foffset = j0;
                                                  vinfos[0].indices[0] = _ij0[0];
                                                  vinfos[0].indices[1] = _ij0[1];
                                                  vinfos[0].maxsolutions = _nj0;
                                                  vinfos[1].jointtype = 1;
                                                  vinfos[1].foffset = j1;
                                                  vinfos[1].indices[0] = _ij1[0];
                                                  vinfos[1].indices[1] = _ij1[1];
                                                  vinfos[1].maxsolutions = _nj1;
                                                  vinfos[2].jointtype = 1;
                                                  vinfos[2].foffset = j2;
                                                  vinfos[2].indices[0] = _ij2[0];
                                                  vinfos[2].indices[1] = _ij2[1];
                                                  vinfos[2].maxsolutions = _nj2;
                                                  vinfos[3].jointtype = 1;
                                                  vinfos[3].foffset = j3;
                                                  vinfos[3].indices[0] = _ij3[0];
                                                  vinfos[3].indices[1] = _ij3[1];
                                                  vinfos[3].maxsolutions = _nj3;
                                                  vinfos[4].jointtype = 1;
                                                  vinfos[4].foffset = j4;
                                                  vinfos[4].indices[0] = _ij4[0];
                                                  vinfos[4].indices[1] = _ij4[1];
                                                  vinfos[4].maxsolutions = _nj4;
                                                  vinfos[5].jointtype = 1;
                                                  vinfos[5].foffset = j5;
                                                  vinfos[5].indices[0] = _ij5[0];
                                                  vinfos[5].indices[1] = _ij5[1];
                                                  vinfos[5].maxsolutions = _nj5;
                                                  std::vector<int> vfree(0);
                                                  solutions.AddSolution(vinfos, vfree);
                                                }
                                              }
                                            }
                                          }
                                          else
                                          {
                                            if (1)
                                            {
                                              continue;
                                            }
                                            else
                                            {
                                            }
                                          }
                                        }
                                      }
                                    }
                                    else
                                    {
                                      {
                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1] = { false };
                                        _nj5 = 1;
                                        if (IKabs(((((IkReal(-1.00000000000000)) * (new_r00) * (sj3))) +
                                                   (((cj3) * (new_r10))))) < IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(((IkReal(-1.00000000000000)) * (new_r20) *
                                                   (((IKabs(sj4) != 0) ? ((IkReal)1 / (sj4)) : (IkReal)1.0e30)))) <
                                                IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(
                                                IKsqr(((((IkReal(-1.00000000000000)) * (new_r00) * (sj3))) +
                                                       (((cj3) * (new_r10))))) +
                                                IKsqr(((IkReal(-1.00000000000000)) * (new_r20) *
                                                       (((IKabs(sj4) != 0) ? ((IkReal)1 / (sj4)) : (IkReal)1.0e30)))) -
                                                1) <= IKFAST_SINCOS_THRESH)
                                          continue;
                                        j5array[0] =
                                            IKatan2(((((IkReal(-1.00000000000000)) * (new_r00) * (sj3))) +
                                                     (((cj3) * (new_r10)))),
                                                    ((IkReal(-1.00000000000000)) * (new_r20) *
                                                     (((IKabs(sj4) != 0) ? ((IkReal)1 / (sj4)) : (IkReal)1.0e30))));
                                        sj5array[0] = IKsin(j5array[0]);
                                        cj5array[0] = IKcos(j5array[0]);
                                        if (j5array[0] > IKPI)
                                        {
                                          j5array[0] -= IK2PI;
                                        }
                                        else if (j5array[0] < -IKPI)
                                        {
                                          j5array[0] += IK2PI;
                                        }
                                        j5valid[0] = true;
                                        for (int ij5 = 0; ij5 < 1; ++ij5)
                                        {
                                          if (!j5valid[ij5])
                                          {
                                            continue;
                                          }
                                          _ij5[0] = ij5;
                                          _ij5[1] = -1;
                                          for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                          {
                                            if (j5valid[iij5] &&
                                                IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                                IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                            {
                                              j5valid[iij5] = false;
                                              _ij5[1] = iij5;
                                              break;
                                            }
                                          }
                                          j5 = j5array[ij5];
                                          cj5 = cj5array[ij5];
                                          sj5 = sj5array[ij5];
                                          {
                                            IkReal evalcond[8];
                                            IkReal x132 = IKsin(j5);
                                            IkReal x133 = IKcos(j5);
                                            IkReal x134 = ((IkReal(1.00000000000000)) * (sj3));
                                            IkReal x135 = ((new_r11) * (sj3));
                                            IkReal x136 = ((new_r10) * (sj3));
                                            IkReal x137 = ((cj3) * (cj4));
                                            IkReal x138 = ((IkReal(1.00000000000000)) * (sj4));
                                            IkReal x139 = ((IkReal(1.00000000000000)) * (x133));
                                            IkReal x140 = ((IkReal(1.00000000000000)) * (x132));
                                            evalcond[0] = ((new_r20) + (((sj4) * (x133))));
                                            evalcond[1] =
                                                ((((IkReal(-1.00000000000000)) * (x132) * (x138))) + (new_r21));
                                            evalcond[2] =
                                                ((((IkReal(-1.00000000000000)) * (x140))) + (((cj3) * (new_r10))) +
                                                 (((IkReal(-1.00000000000000)) * (new_r00) * (x134))));
                                            evalcond[3] =
                                                ((((IkReal(-1.00000000000000)) * (x139))) + (((cj3) * (new_r11))) +
                                                 (((IkReal(-1.00000000000000)) * (new_r01) * (x134))));
                                            evalcond[4] = ((((cj4) * (x132))) + (x135) + (((cj3) * (new_r01))));
                                            evalcond[5] = ((x136) + (((IkReal(-1.00000000000000)) * (cj4) * (x139))) +
                                                           (((cj3) * (new_r00))));
                                            evalcond[6] = ((((cj4) * (x135))) + (((new_r01) * (x137))) + (x132) +
                                                           (((IkReal(-1.00000000000000)) * (new_r21) * (x138))));
                                            evalcond[7] = ((((IkReal(-1.00000000000000)) * (x139))) +
                                                           (((IkReal(-1.00000000000000)) * (new_r20) * (x138))) +
                                                           (((cj4) * (x136))) + (((new_r00) * (x137))));
                                            if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                                                IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001 ||
                                                IKabs(evalcond[4]) > 0.000001 || IKabs(evalcond[5]) > 0.000001 ||
                                                IKabs(evalcond[6]) > 0.000001 || IKabs(evalcond[7]) > 0.000001)
                                            {
                                              continue;
                                            }
                                          }

                                          {
                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                            vinfos[0].jointtype = 1;
                                            vinfos[0].foffset = j0;
                                            vinfos[0].indices[0] = _ij0[0];
                                            vinfos[0].indices[1] = _ij0[1];
                                            vinfos[0].maxsolutions = _nj0;
                                            vinfos[1].jointtype = 1;
                                            vinfos[1].foffset = j1;
                                            vinfos[1].indices[0] = _ij1[0];
                                            vinfos[1].indices[1] = _ij1[1];
                                            vinfos[1].maxsolutions = _nj1;
                                            vinfos[2].jointtype = 1;
                                            vinfos[2].foffset = j2;
                                            vinfos[2].indices[0] = _ij2[0];
                                            vinfos[2].indices[1] = _ij2[1];
                                            vinfos[2].maxsolutions = _nj2;
                                            vinfos[3].jointtype = 1;
                                            vinfos[3].foffset = j3;
                                            vinfos[3].indices[0] = _ij3[0];
                                            vinfos[3].indices[1] = _ij3[1];
                                            vinfos[3].maxsolutions = _nj3;
                                            vinfos[4].jointtype = 1;
                                            vinfos[4].foffset = j4;
                                            vinfos[4].indices[0] = _ij4[0];
                                            vinfos[4].indices[1] = _ij4[1];
                                            vinfos[4].maxsolutions = _nj4;
                                            vinfos[5].jointtype = 1;
                                            vinfos[5].foffset = j5;
                                            vinfos[5].indices[0] = _ij5[0];
                                            vinfos[5].indices[1] = _ij5[1];
                                            vinfos[5].maxsolutions = _nj5;
                                            std::vector<int> vfree(0);
                                            solutions.AddSolution(vinfos, vfree);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  {
                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1] = { false };
                                    _nj5 = 1;
                                    if (IKabs(((new_r21) *
                                               (((IKabs(sj4) != 0) ? ((IkReal)1 / (sj4)) : (IkReal)1.0e30)))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(((((IkReal(-1.00000000000000)) * (new_r01) * (sj3))) +
                                               (((cj3) * (new_r11))))) < IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(IKsqr(((new_r21) *
                                                     (((IKabs(sj4) != 0) ? ((IkReal)1 / (sj4)) : (IkReal)1.0e30)))) +
                                              IKsqr(((((IkReal(-1.00000000000000)) * (new_r01) * (sj3))) +
                                                     (((cj3) * (new_r11))))) -
                                              1) <= IKFAST_SINCOS_THRESH)
                                      continue;
                                    j5array[0] = IKatan2(
                                        ((new_r21) * (((IKabs(sj4) != 0) ? ((IkReal)1 / (sj4)) : (IkReal)1.0e30))),
                                        ((((IkReal(-1.00000000000000)) * (new_r01) * (sj3))) + (((cj3) * (new_r11)))));
                                    sj5array[0] = IKsin(j5array[0]);
                                    cj5array[0] = IKcos(j5array[0]);
                                    if (j5array[0] > IKPI)
                                    {
                                      j5array[0] -= IK2PI;
                                    }
                                    else if (j5array[0] < -IKPI)
                                    {
                                      j5array[0] += IK2PI;
                                    }
                                    j5valid[0] = true;
                                    for (int ij5 = 0; ij5 < 1; ++ij5)
                                    {
                                      if (!j5valid[ij5])
                                      {
                                        continue;
                                      }
                                      _ij5[0] = ij5;
                                      _ij5[1] = -1;
                                      for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                      {
                                        if (j5valid[iij5] &&
                                            IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                        {
                                          j5valid[iij5] = false;
                                          _ij5[1] = iij5;
                                          break;
                                        }
                                      }
                                      j5 = j5array[ij5];
                                      cj5 = cj5array[ij5];
                                      sj5 = sj5array[ij5];
                                      {
                                        IkReal evalcond[8];
                                        IkReal x141 = IKsin(j5);
                                        IkReal x142 = IKcos(j5);
                                        IkReal x143 = ((IkReal(1.00000000000000)) * (sj3));
                                        IkReal x144 = ((new_r11) * (sj3));
                                        IkReal x145 = ((new_r10) * (sj3));
                                        IkReal x146 = ((cj3) * (cj4));
                                        IkReal x147 = ((IkReal(1.00000000000000)) * (sj4));
                                        IkReal x148 = ((IkReal(1.00000000000000)) * (x142));
                                        IkReal x149 = ((IkReal(1.00000000000000)) * (x141));
                                        evalcond[0] = ((((sj4) * (x142))) + (new_r20));
                                        evalcond[1] = ((new_r21) + (((IkReal(-1.00000000000000)) * (x141) * (x147))));
                                        evalcond[2] =
                                            ((((IkReal(-1.00000000000000)) * (new_r00) * (x143))) +
                                             (((cj3) * (new_r10))) + (((IkReal(-1.00000000000000)) * (x149))));
                                        evalcond[3] = ((((IkReal(-1.00000000000000)) * (x148))) +
                                                       (((IkReal(-1.00000000000000)) * (new_r01) * (x143))) +
                                                       (((cj3) * (new_r11))));
                                        evalcond[4] = ((((cj4) * (x141))) + (x144) + (((cj3) * (new_r01))));
                                        evalcond[5] = ((((IkReal(-1.00000000000000)) * (cj4) * (x148))) + (x145) +
                                                       (((cj3) * (new_r00))));
                                        evalcond[6] = ((((cj4) * (x144))) + (((new_r01) * (x146))) + (x141) +
                                                       (((IkReal(-1.00000000000000)) * (new_r21) * (x147))));
                                        evalcond[7] = ((((cj4) * (x145))) + (((IkReal(-1.00000000000000)) * (x148))) +
                                                       (((IkReal(-1.00000000000000)) * (new_r20) * (x147))) +
                                                       (((new_r00) * (x146))));
                                        if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                                            IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001 ||
                                            IKabs(evalcond[4]) > 0.000001 || IKabs(evalcond[5]) > 0.000001 ||
                                            IKabs(evalcond[6]) > 0.000001 || IKabs(evalcond[7]) > 0.000001)
                                        {
                                          continue;
                                        }
                                      }

                                      {
                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                        vinfos[0].jointtype = 1;
                                        vinfos[0].foffset = j0;
                                        vinfos[0].indices[0] = _ij0[0];
                                        vinfos[0].indices[1] = _ij0[1];
                                        vinfos[0].maxsolutions = _nj0;
                                        vinfos[1].jointtype = 1;
                                        vinfos[1].foffset = j1;
                                        vinfos[1].indices[0] = _ij1[0];
                                        vinfos[1].indices[1] = _ij1[1];
                                        vinfos[1].maxsolutions = _nj1;
                                        vinfos[2].jointtype = 1;
                                        vinfos[2].foffset = j2;
                                        vinfos[2].indices[0] = _ij2[0];
                                        vinfos[2].indices[1] = _ij2[1];
                                        vinfos[2].maxsolutions = _nj2;
                                        vinfos[3].jointtype = 1;
                                        vinfos[3].foffset = j3;
                                        vinfos[3].indices[0] = _ij3[0];
                                        vinfos[3].indices[1] = _ij3[1];
                                        vinfos[3].maxsolutions = _nj3;
                                        vinfos[4].jointtype = 1;
                                        vinfos[4].foffset = j4;
                                        vinfos[4].indices[0] = _ij4[0];
                                        vinfos[4].indices[1] = _ij4[1];
                                        vinfos[4].maxsolutions = _nj4;
                                        vinfos[5].jointtype = 1;
                                        vinfos[5].foffset = j5;
                                        vinfos[5].indices[0] = _ij5[0];
                                        vinfos[5].indices[1] = _ij5[1];
                                        vinfos[5].maxsolutions = _nj5;
                                        std::vector<int> vfree(0);
                                        solutions.AddSolution(vinfos, vfree);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            else
                            {
                              {
                                IkReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1] = { false };
                                _nj5 = 1;
                                if (IKabs(((gconst5) * (new_r21))) < IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(((IkReal(-1.00000000000000)) * (gconst5) * (new_r20))) <
                                        IKFAST_ATAN2_MAGTHRESH)
                                  continue;
                                j5array[0] = IKatan2(((gconst5) * (new_r21)),
                                                     ((IkReal(-1.00000000000000)) * (gconst5) * (new_r20)));
                                sj5array[0] = IKsin(j5array[0]);
                                cj5array[0] = IKcos(j5array[0]);
                                if (j5array[0] > IKPI)
                                {
                                  j5array[0] -= IK2PI;
                                }
                                else if (j5array[0] < -IKPI)
                                {
                                  j5array[0] += IK2PI;
                                }
                                j5valid[0] = true;
                                for (int ij5 = 0; ij5 < 1; ++ij5)
                                {
                                  if (!j5valid[ij5])
                                  {
                                    continue;
                                  }
                                  _ij5[0] = ij5;
                                  _ij5[1] = -1;
                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                  {
                                    if (j5valid[iij5] &&
                                        IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                    {
                                      j5valid[iij5] = false;
                                      _ij5[1] = iij5;
                                      break;
                                    }
                                  }
                                  j5 = j5array[ij5];
                                  cj5 = cj5array[ij5];
                                  sj5 = sj5array[ij5];
                                  {
                                    IkReal evalcond[8];
                                    IkReal x150 = IKsin(j5);
                                    IkReal x151 = IKcos(j5);
                                    IkReal x152 = ((IkReal(1.00000000000000)) * (sj3));
                                    IkReal x153 = ((new_r11) * (sj3));
                                    IkReal x154 = ((new_r10) * (sj3));
                                    IkReal x155 = ((cj3) * (cj4));
                                    IkReal x156 = ((IkReal(1.00000000000000)) * (sj4));
                                    IkReal x157 = ((IkReal(1.00000000000000)) * (x151));
                                    IkReal x158 = ((IkReal(1.00000000000000)) * (x150));
                                    evalcond[0] = ((((sj4) * (x151))) + (new_r20));
                                    evalcond[1] = ((new_r21) + (((IkReal(-1.00000000000000)) * (x150) * (x156))));
                                    evalcond[2] = ((((IkReal(-1.00000000000000)) * (new_r00) * (x152))) +
                                                   (((IkReal(-1.00000000000000)) * (x158))) + (((cj3) * (new_r10))));
                                    evalcond[3] = ((((cj3) * (new_r11))) + (((IkReal(-1.00000000000000)) * (x157))) +
                                                   (((IkReal(-1.00000000000000)) * (new_r01) * (x152))));
                                    evalcond[4] = ((x153) + (((cj4) * (x150))) + (((cj3) * (new_r01))));
                                    evalcond[5] = ((x154) + (((IkReal(-1.00000000000000)) * (cj4) * (x157))) +
                                                   (((cj3) * (new_r00))));
                                    evalcond[6] = ((((IkReal(-1.00000000000000)) * (new_r21) * (x156))) + (x150) +
                                                   (((new_r01) * (x155))) + (((cj4) * (x153))));
                                    evalcond[7] = ((((IkReal(-1.00000000000000)) * (x157))) +
                                                   (((IkReal(-1.00000000000000)) * (new_r20) * (x156))) +
                                                   (((cj4) * (x154))) + (((new_r00) * (x155))));
                                    if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                                        IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001 ||
                                        IKabs(evalcond[4]) > 0.000001 || IKabs(evalcond[5]) > 0.000001 ||
                                        IKabs(evalcond[6]) > 0.000001 || IKabs(evalcond[7]) > 0.000001)
                                    {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j0;
                                    vinfos[0].indices[0] = _ij0[0];
                                    vinfos[0].indices[1] = _ij0[1];
                                    vinfos[0].maxsolutions = _nj0;
                                    vinfos[1].jointtype = 1;
                                    vinfos[1].foffset = j1;
                                    vinfos[1].indices[0] = _ij1[0];
                                    vinfos[1].indices[1] = _ij1[1];
                                    vinfos[1].maxsolutions = _nj1;
                                    vinfos[2].jointtype = 1;
                                    vinfos[2].foffset = j2;
                                    vinfos[2].indices[0] = _ij2[0];
                                    vinfos[2].indices[1] = _ij2[1];
                                    vinfos[2].maxsolutions = _nj2;
                                    vinfos[3].jointtype = 1;
                                    vinfos[3].foffset = j3;
                                    vinfos[3].indices[0] = _ij3[0];
                                    vinfos[3].indices[1] = _ij3[1];
                                    vinfos[3].maxsolutions = _nj3;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j4;
                                    vinfos[4].indices[0] = _ij4[0];
                                    vinfos[4].indices[1] = _ij4[1];
                                    vinfos[4].maxsolutions = _nj4;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j5;
                                    vinfos[5].indices[0] = _ij5[0];
                                    vinfos[5].indices[1] = _ij5[1];
                                    vinfos[5].maxsolutions = _nj5;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                else
                {
                  {
                    IkReal j3array[1], cj3array[1], sj3array[1];
                    bool j3valid[1] = { false };
                    _nj3 = 1;
                    IkReal x159 = ((gconst2) * (sj4));
                    if (IKabs(((new_r12) * (x159))) < IKFAST_ATAN2_MAGTHRESH &&
                        IKabs(((new_r02) * (x159))) < IKFAST_ATAN2_MAGTHRESH)
                      continue;
                    j3array[0] = IKatan2(((new_r12) * (x159)), ((new_r02) * (x159)));
                    sj3array[0] = IKsin(j3array[0]);
                    cj3array[0] = IKcos(j3array[0]);
                    if (j3array[0] > IKPI)
                    {
                      j3array[0] -= IK2PI;
                    }
                    else if (j3array[0] < -IKPI)
                    {
                      j3array[0] += IK2PI;
                    }
                    j3valid[0] = true;
                    for (int ij3 = 0; ij3 < 1; ++ij3)
                    {
                      if (!j3valid[ij3])
                      {
                        continue;
                      }
                      _ij3[0] = ij3;
                      _ij3[1] = -1;
                      for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                      {
                        if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                            IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                        {
                          j3valid[iij3] = false;
                          _ij3[1] = iij3;
                          break;
                        }
                      }
                      j3 = j3array[ij3];
                      cj3 = cj3array[ij3];
                      sj3 = sj3array[ij3];
                      {
                        IkReal evalcond[6];
                        IkReal x160 = IKsin(j3);
                        IkReal x161 = IKcos(j3);
                        IkReal x162 = ((IkReal(1.00000000000000)) * (sj4));
                        IkReal x163 = ((sj4) * (x160));
                        IkReal x164 = ((sj4) * (x161));
                        IkReal x165 = ((new_r02) * (x161));
                        IkReal x166 = ((new_r12) * (x160));
                        evalcond[0] = ((((new_r12) * (x161))) + (((IkReal(-1.00000000000000)) * (new_r02) * (x160))));
                        evalcond[1] = ((x166) + (x165) + (((IkReal(-1.00000000000000)) * (x162))));
                        evalcond[2] = ((((new_r00) * (x164))) + (((new_r10) * (x163))) + (((cj4) * (new_r20))));
                        evalcond[3] = ((((new_r01) * (x164))) + (((new_r11) * (x163))) + (((cj4) * (new_r21))));
                        evalcond[4] = ((IkReal(-1.00000000000000)) + (((new_r02) * (x164))) + (((new_r12) * (x163))) +
                                       (((cj4) * (new_r22))));
                        evalcond[5] = ((((cj4) * (x165))) + (((IkReal(-1.00000000000000)) * (new_r22) * (x162))) +
                                       (((cj4) * (x166))));
                        if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                            IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001 ||
                            IKabs(evalcond[4]) > 0.000001 || IKabs(evalcond[5]) > 0.000001)
                        {
                          continue;
                        }
                      }

                      {
                        IkReal dummyeval[1];
                        IkReal gconst5;
                        gconst5 = IKsign(sj4);
                        dummyeval[0] = sj4;
                        if (IKabs(dummyeval[0]) < 0.0000010000000000)
                        {
                          {
                            IkReal dummyeval[1];
                            dummyeval[0] = sj4;
                            if (IKabs(dummyeval[0]) < 0.0000010000000000)
                            {
                              {
                                IkReal dummyeval[1];
                                dummyeval[0] = sj4;
                                if (IKabs(dummyeval[0]) < 0.0000010000000000)
                                {
                                  {
                                    IkReal evalcond[11];
                                    IkReal x167 = ((IkReal(-1.00000000000000)) + (new_r22));
                                    IkReal x168 =
                                        ((((cj3) * (new_r12))) + (((IkReal(-1.00000000000000)) * (new_r02) * (sj3))));
                                    IkReal x169 = ((((new_r12) * (sj3))) + (((cj3) * (new_r02))));
                                    evalcond[0] =
                                        ((IkReal(-3.14159265358979)) +
                                         (IKfmod(((IkReal(3.14159265358979)) + (j4)), IkReal(6.28318530717959))));
                                    evalcond[1] = x167;
                                    evalcond[2] = new_r20;
                                    evalcond[3] = new_r21;
                                    evalcond[4] = x168;
                                    evalcond[5] = x168;
                                    evalcond[6] = x169;
                                    evalcond[7] = new_r20;
                                    evalcond[8] = new_r21;
                                    evalcond[9] = x167;
                                    evalcond[10] = x169;
                                    if (IKabs(evalcond[0]) < 0.0000010000000000 &&
                                        IKabs(evalcond[1]) < 0.0000010000000000 &&
                                        IKabs(evalcond[2]) < 0.0000010000000000 &&
                                        IKabs(evalcond[3]) < 0.0000010000000000 &&
                                        IKabs(evalcond[4]) < 0.0000010000000000 &&
                                        IKabs(evalcond[5]) < 0.0000010000000000 &&
                                        IKabs(evalcond[6]) < 0.0000010000000000 &&
                                        IKabs(evalcond[7]) < 0.0000010000000000 &&
                                        IKabs(evalcond[8]) < 0.0000010000000000 &&
                                        IKabs(evalcond[9]) < 0.0000010000000000 &&
                                        IKabs(evalcond[10]) < 0.0000010000000000)
                                    {
                                      {
                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1] = { false };
                                        _nj5 = 1;
                                        if (IKabs(((((IkReal(-1.00000000000000)) * (new_r11) * (sj3))) +
                                                   (((IkReal(-1.00000000000000)) * (cj3) * (new_r01))))) <
                                                IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(((((new_r10) * (sj3))) + (((cj3) * (new_r00))))) <
                                                IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(IKsqr(((((IkReal(-1.00000000000000)) * (new_r11) * (sj3))) +
                                                         (((IkReal(-1.00000000000000)) * (cj3) * (new_r01))))) +
                                                  IKsqr(((((new_r10) * (sj3))) + (((cj3) * (new_r00))))) - 1) <=
                                                IKFAST_SINCOS_THRESH)
                                          continue;
                                        j5array[0] = IKatan2(((((IkReal(-1.00000000000000)) * (new_r11) * (sj3))) +
                                                              (((IkReal(-1.00000000000000)) * (cj3) * (new_r01)))),
                                                             ((((new_r10) * (sj3))) + (((cj3) * (new_r00)))));
                                        sj5array[0] = IKsin(j5array[0]);
                                        cj5array[0] = IKcos(j5array[0]);
                                        if (j5array[0] > IKPI)
                                        {
                                          j5array[0] -= IK2PI;
                                        }
                                        else if (j5array[0] < -IKPI)
                                        {
                                          j5array[0] += IK2PI;
                                        }
                                        j5valid[0] = true;
                                        for (int ij5 = 0; ij5 < 1; ++ij5)
                                        {
                                          if (!j5valid[ij5])
                                          {
                                            continue;
                                          }
                                          _ij5[0] = ij5;
                                          _ij5[1] = -1;
                                          for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                          {
                                            if (j5valid[iij5] &&
                                                IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                                IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                            {
                                              j5valid[iij5] = false;
                                              _ij5[1] = iij5;
                                              break;
                                            }
                                          }
                                          j5 = j5array[ij5];
                                          cj5 = cj5array[ij5];
                                          sj5 = sj5array[ij5];
                                          {
                                            IkReal evalcond[4];
                                            IkReal x170 = IKsin(j5);
                                            IkReal x171 = ((IkReal(1.00000000000000)) * (sj3));
                                            IkReal x172 = ((IkReal(1.00000000000000)) * (IKcos(j5)));
                                            evalcond[0] =
                                                ((((IkReal(-1.00000000000000)) * (x170))) + (((cj3) * (new_r10))) +
                                                 (((IkReal(-1.00000000000000)) * (new_r00) * (x171))));
                                            evalcond[1] =
                                                ((((IkReal(-1.00000000000000)) * (new_r01) * (x171))) +
                                                 (((cj3) * (new_r11))) + (((IkReal(-1.00000000000000)) * (x172))));
                                            evalcond[2] = ((x170) + (((new_r11) * (sj3))) + (((cj3) * (new_r01))));
                                            evalcond[3] =
                                                ((((new_r10) * (sj3))) + (((IkReal(-1.00000000000000)) * (x172))) +
                                                 (((cj3) * (new_r00))));
                                            if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                                                IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001)
                                            {
                                              continue;
                                            }
                                          }

                                          {
                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                            vinfos[0].jointtype = 1;
                                            vinfos[0].foffset = j0;
                                            vinfos[0].indices[0] = _ij0[0];
                                            vinfos[0].indices[1] = _ij0[1];
                                            vinfos[0].maxsolutions = _nj0;
                                            vinfos[1].jointtype = 1;
                                            vinfos[1].foffset = j1;
                                            vinfos[1].indices[0] = _ij1[0];
                                            vinfos[1].indices[1] = _ij1[1];
                                            vinfos[1].maxsolutions = _nj1;
                                            vinfos[2].jointtype = 1;
                                            vinfos[2].foffset = j2;
                                            vinfos[2].indices[0] = _ij2[0];
                                            vinfos[2].indices[1] = _ij2[1];
                                            vinfos[2].maxsolutions = _nj2;
                                            vinfos[3].jointtype = 1;
                                            vinfos[3].foffset = j3;
                                            vinfos[3].indices[0] = _ij3[0];
                                            vinfos[3].indices[1] = _ij3[1];
                                            vinfos[3].maxsolutions = _nj3;
                                            vinfos[4].jointtype = 1;
                                            vinfos[4].foffset = j4;
                                            vinfos[4].indices[0] = _ij4[0];
                                            vinfos[4].indices[1] = _ij4[1];
                                            vinfos[4].maxsolutions = _nj4;
                                            vinfos[5].jointtype = 1;
                                            vinfos[5].foffset = j5;
                                            vinfos[5].indices[0] = _ij5[0];
                                            vinfos[5].indices[1] = _ij5[1];
                                            vinfos[5].maxsolutions = _nj5;
                                            std::vector<int> vfree(0);
                                            solutions.AddSolution(vinfos, vfree);
                                          }
                                        }
                                      }
                                    }
                                    else
                                    {
                                      IkReal x173 = ((new_r12) * (sj3));
                                      IkReal x174 = ((IkReal(1.00000000000000)) * (new_r02));
                                      IkReal x175 =
                                          ((((cj3) * (new_r12))) + (((IkReal(-1.00000000000000)) * (sj3) * (x174))));
                                      evalcond[0] =
                                          ((IkReal(-3.14159265358979)) + (IKfmod(j4, IkReal(6.28318530717959))));
                                      evalcond[1] = ((IkReal(1.00000000000000)) + (new_r22));
                                      evalcond[2] = new_r20;
                                      evalcond[3] = new_r21;
                                      evalcond[4] = x175;
                                      evalcond[5] = x175;
                                      evalcond[6] = ((x173) + (((cj3) * (new_r02))));
                                      evalcond[7] = ((IkReal(-1.00000000000000)) * (new_r20));
                                      evalcond[8] = ((IkReal(-1.00000000000000)) * (new_r21));
                                      evalcond[9] =
                                          ((IkReal(-1.00000000000000)) + (((IkReal(-1.00000000000000)) * (new_r22))));
                                      evalcond[10] = ((((IkReal(-1.00000000000000)) * (x173))) +
                                                      (((IkReal(-1.00000000000000)) * (cj3) * (x174))));
                                      if (IKabs(evalcond[0]) < 0.0000010000000000 &&
                                          IKabs(evalcond[1]) < 0.0000010000000000 &&
                                          IKabs(evalcond[2]) < 0.0000010000000000 &&
                                          IKabs(evalcond[3]) < 0.0000010000000000 &&
                                          IKabs(evalcond[4]) < 0.0000010000000000 &&
                                          IKabs(evalcond[5]) < 0.0000010000000000 &&
                                          IKabs(evalcond[6]) < 0.0000010000000000 &&
                                          IKabs(evalcond[7]) < 0.0000010000000000 &&
                                          IKabs(evalcond[8]) < 0.0000010000000000 &&
                                          IKabs(evalcond[9]) < 0.0000010000000000 &&
                                          IKabs(evalcond[10]) < 0.0000010000000000)
                                      {
                                        {
                                          IkReal j5array[1], cj5array[1], sj5array[1];
                                          bool j5valid[1] = { false };
                                          _nj5 = 1;
                                          if (IKabs(((((new_r11) * (sj3))) + (((cj3) * (new_r01))))) <
                                                  IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs(((((IkReal(-1.00000000000000)) * (cj3) * (new_r00))) +
                                                     (((IkReal(-1.00000000000000)) * (new_r10) * (sj3))))) <
                                                  IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs(IKsqr(((((new_r11) * (sj3))) + (((cj3) * (new_r01))))) +
                                                    IKsqr(((((IkReal(-1.00000000000000)) * (cj3) * (new_r00))) +
                                                           (((IkReal(-1.00000000000000)) * (new_r10) * (sj3))))) -
                                                    1) <= IKFAST_SINCOS_THRESH)
                                            continue;
                                          j5array[0] = IKatan2(((((new_r11) * (sj3))) + (((cj3) * (new_r01)))),
                                                               ((((IkReal(-1.00000000000000)) * (cj3) * (new_r00))) +
                                                                (((IkReal(-1.00000000000000)) * (new_r10) * (sj3)))));
                                          sj5array[0] = IKsin(j5array[0]);
                                          cj5array[0] = IKcos(j5array[0]);
                                          if (j5array[0] > IKPI)
                                          {
                                            j5array[0] -= IK2PI;
                                          }
                                          else if (j5array[0] < -IKPI)
                                          {
                                            j5array[0] += IK2PI;
                                          }
                                          j5valid[0] = true;
                                          for (int ij5 = 0; ij5 < 1; ++ij5)
                                          {
                                            if (!j5valid[ij5])
                                            {
                                              continue;
                                            }
                                            _ij5[0] = ij5;
                                            _ij5[1] = -1;
                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                            {
                                              if (j5valid[iij5] &&
                                                  IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                                  IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                              {
                                                j5valid[iij5] = false;
                                                _ij5[1] = iij5;
                                                break;
                                              }
                                            }
                                            j5 = j5array[ij5];
                                            cj5 = cj5array[ij5];
                                            sj5 = sj5array[ij5];
                                            {
                                              IkReal evalcond[4];
                                              IkReal x176 = IKcos(j5);
                                              IkReal x177 = ((IkReal(1.00000000000000)) * (sj3));
                                              IkReal x178 = ((IkReal(1.00000000000000)) * (IKsin(j5)));
                                              evalcond[0] =
                                                  ((((IkReal(-1.00000000000000)) * (new_r00) * (x177))) +
                                                   (((IkReal(-1.00000000000000)) * (x178))) + (((cj3) * (new_r10))));
                                              evalcond[1] = ((((cj3) * (new_r11))) +
                                                             (((IkReal(-1.00000000000000)) * (new_r01) * (x177))) +
                                                             (((IkReal(-1.00000000000000)) * (x176))));
                                              evalcond[2] = ((((IkReal(-1.00000000000000)) * (x178))) +
                                                             (((new_r11) * (sj3))) + (((cj3) * (new_r01))));
                                              evalcond[3] = ((x176) + (((new_r10) * (sj3))) + (((cj3) * (new_r00))));
                                              if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                                                  IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001)
                                              {
                                                continue;
                                              }
                                            }

                                            {
                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                              vinfos[0].jointtype = 1;
                                              vinfos[0].foffset = j0;
                                              vinfos[0].indices[0] = _ij0[0];
                                              vinfos[0].indices[1] = _ij0[1];
                                              vinfos[0].maxsolutions = _nj0;
                                              vinfos[1].jointtype = 1;
                                              vinfos[1].foffset = j1;
                                              vinfos[1].indices[0] = _ij1[0];
                                              vinfos[1].indices[1] = _ij1[1];
                                              vinfos[1].maxsolutions = _nj1;
                                              vinfos[2].jointtype = 1;
                                              vinfos[2].foffset = j2;
                                              vinfos[2].indices[0] = _ij2[0];
                                              vinfos[2].indices[1] = _ij2[1];
                                              vinfos[2].maxsolutions = _nj2;
                                              vinfos[3].jointtype = 1;
                                              vinfos[3].foffset = j3;
                                              vinfos[3].indices[0] = _ij3[0];
                                              vinfos[3].indices[1] = _ij3[1];
                                              vinfos[3].maxsolutions = _nj3;
                                              vinfos[4].jointtype = 1;
                                              vinfos[4].foffset = j4;
                                              vinfos[4].indices[0] = _ij4[0];
                                              vinfos[4].indices[1] = _ij4[1];
                                              vinfos[4].maxsolutions = _nj4;
                                              vinfos[5].jointtype = 1;
                                              vinfos[5].foffset = j5;
                                              vinfos[5].indices[0] = _ij5[0];
                                              vinfos[5].indices[1] = _ij5[1];
                                              vinfos[5].maxsolutions = _nj5;
                                              std::vector<int> vfree(0);
                                              solutions.AddSolution(vinfos, vfree);
                                            }
                                          }
                                        }
                                      }
                                      else
                                      {
                                        if (1)
                                        {
                                          continue;
                                        }
                                        else
                                        {
                                        }
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  {
                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1] = { false };
                                    _nj5 = 1;
                                    if (IKabs(((((IkReal(-1.00000000000000)) * (new_r00) * (sj3))) +
                                               (((cj3) * (new_r10))))) < IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(((IkReal(-1.00000000000000)) * (new_r20) *
                                               (((IKabs(sj4) != 0) ? ((IkReal)1 / (sj4)) : (IkReal)1.0e30)))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(IKsqr(((((IkReal(-1.00000000000000)) * (new_r00) * (sj3))) +
                                                     (((cj3) * (new_r10))))) +
                                              IKsqr(((IkReal(-1.00000000000000)) * (new_r20) *
                                                     (((IKabs(sj4) != 0) ? ((IkReal)1 / (sj4)) : (IkReal)1.0e30)))) -
                                              1) <= IKFAST_SINCOS_THRESH)
                                      continue;
                                    j5array[0] = IKatan2(
                                        ((((IkReal(-1.00000000000000)) * (new_r00) * (sj3))) + (((cj3) * (new_r10)))),
                                        ((IkReal(-1.00000000000000)) * (new_r20) *
                                         (((IKabs(sj4) != 0) ? ((IkReal)1 / (sj4)) : (IkReal)1.0e30))));
                                    sj5array[0] = IKsin(j5array[0]);
                                    cj5array[0] = IKcos(j5array[0]);
                                    if (j5array[0] > IKPI)
                                    {
                                      j5array[0] -= IK2PI;
                                    }
                                    else if (j5array[0] < -IKPI)
                                    {
                                      j5array[0] += IK2PI;
                                    }
                                    j5valid[0] = true;
                                    for (int ij5 = 0; ij5 < 1; ++ij5)
                                    {
                                      if (!j5valid[ij5])
                                      {
                                        continue;
                                      }
                                      _ij5[0] = ij5;
                                      _ij5[1] = -1;
                                      for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                      {
                                        if (j5valid[iij5] &&
                                            IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                        {
                                          j5valid[iij5] = false;
                                          _ij5[1] = iij5;
                                          break;
                                        }
                                      }
                                      j5 = j5array[ij5];
                                      cj5 = cj5array[ij5];
                                      sj5 = sj5array[ij5];
                                      {
                                        IkReal evalcond[8];
                                        IkReal x179 = IKsin(j5);
                                        IkReal x180 = IKcos(j5);
                                        IkReal x181 = ((IkReal(1.00000000000000)) * (sj3));
                                        IkReal x182 = ((new_r11) * (sj3));
                                        IkReal x183 = ((new_r10) * (sj3));
                                        IkReal x184 = ((cj3) * (cj4));
                                        IkReal x185 = ((IkReal(1.00000000000000)) * (sj4));
                                        IkReal x186 = ((IkReal(1.00000000000000)) * (x180));
                                        IkReal x187 = ((IkReal(1.00000000000000)) * (x179));
                                        evalcond[0] = ((((sj4) * (x180))) + (new_r20));
                                        evalcond[1] = ((new_r21) + (((IkReal(-1.00000000000000)) * (x179) * (x185))));
                                        evalcond[2] =
                                            ((((IkReal(-1.00000000000000)) * (new_r00) * (x181))) +
                                             (((IkReal(-1.00000000000000)) * (x187))) + (((cj3) * (new_r10))));
                                        evalcond[3] =
                                            ((((IkReal(-1.00000000000000)) * (new_r01) * (x181))) +
                                             (((cj3) * (new_r11))) + (((IkReal(-1.00000000000000)) * (x186))));
                                        evalcond[4] = ((x182) + (((cj3) * (new_r01))) + (((cj4) * (x179))));
                                        evalcond[5] = ((x183) + (((IkReal(-1.00000000000000)) * (cj4) * (x186))) +
                                                       (((cj3) * (new_r00))));
                                        evalcond[6] = ((x179) + (((cj4) * (x182))) + (((new_r01) * (x184))) +
                                                       (((IkReal(-1.00000000000000)) * (new_r21) * (x185))));
                                        evalcond[7] = ((((new_r00) * (x184))) + (((cj4) * (x183))) +
                                                       (((IkReal(-1.00000000000000)) * (new_r20) * (x185))) +
                                                       (((IkReal(-1.00000000000000)) * (x186))));
                                        if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                                            IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001 ||
                                            IKabs(evalcond[4]) > 0.000001 || IKabs(evalcond[5]) > 0.000001 ||
                                            IKabs(evalcond[6]) > 0.000001 || IKabs(evalcond[7]) > 0.000001)
                                        {
                                          continue;
                                        }
                                      }

                                      {
                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                        vinfos[0].jointtype = 1;
                                        vinfos[0].foffset = j0;
                                        vinfos[0].indices[0] = _ij0[0];
                                        vinfos[0].indices[1] = _ij0[1];
                                        vinfos[0].maxsolutions = _nj0;
                                        vinfos[1].jointtype = 1;
                                        vinfos[1].foffset = j1;
                                        vinfos[1].indices[0] = _ij1[0];
                                        vinfos[1].indices[1] = _ij1[1];
                                        vinfos[1].maxsolutions = _nj1;
                                        vinfos[2].jointtype = 1;
                                        vinfos[2].foffset = j2;
                                        vinfos[2].indices[0] = _ij2[0];
                                        vinfos[2].indices[1] = _ij2[1];
                                        vinfos[2].maxsolutions = _nj2;
                                        vinfos[3].jointtype = 1;
                                        vinfos[3].foffset = j3;
                                        vinfos[3].indices[0] = _ij3[0];
                                        vinfos[3].indices[1] = _ij3[1];
                                        vinfos[3].maxsolutions = _nj3;
                                        vinfos[4].jointtype = 1;
                                        vinfos[4].foffset = j4;
                                        vinfos[4].indices[0] = _ij4[0];
                                        vinfos[4].indices[1] = _ij4[1];
                                        vinfos[4].maxsolutions = _nj4;
                                        vinfos[5].jointtype = 1;
                                        vinfos[5].foffset = j5;
                                        vinfos[5].indices[0] = _ij5[0];
                                        vinfos[5].indices[1] = _ij5[1];
                                        vinfos[5].maxsolutions = _nj5;
                                        std::vector<int> vfree(0);
                                        solutions.AddSolution(vinfos, vfree);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            else
                            {
                              {
                                IkReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1] = { false };
                                _nj5 = 1;
                                if (IKabs(((new_r21) * (((IKabs(sj4) != 0) ? ((IkReal)1 / (sj4)) : (IkReal)1.0e30)))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(((((IkReal(-1.00000000000000)) * (new_r01) * (sj3))) +
                                           (((cj3) * (new_r11))))) < IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(IKsqr(((new_r21) *
                                                 (((IKabs(sj4) != 0) ? ((IkReal)1 / (sj4)) : (IkReal)1.0e30)))) +
                                          IKsqr(((((IkReal(-1.00000000000000)) * (new_r01) * (sj3))) +
                                                 (((cj3) * (new_r11))))) -
                                          1) <= IKFAST_SINCOS_THRESH)
                                  continue;
                                j5array[0] = IKatan2(
                                    ((new_r21) * (((IKabs(sj4) != 0) ? ((IkReal)1 / (sj4)) : (IkReal)1.0e30))),
                                    ((((IkReal(-1.00000000000000)) * (new_r01) * (sj3))) + (((cj3) * (new_r11)))));
                                sj5array[0] = IKsin(j5array[0]);
                                cj5array[0] = IKcos(j5array[0]);
                                if (j5array[0] > IKPI)
                                {
                                  j5array[0] -= IK2PI;
                                }
                                else if (j5array[0] < -IKPI)
                                {
                                  j5array[0] += IK2PI;
                                }
                                j5valid[0] = true;
                                for (int ij5 = 0; ij5 < 1; ++ij5)
                                {
                                  if (!j5valid[ij5])
                                  {
                                    continue;
                                  }
                                  _ij5[0] = ij5;
                                  _ij5[1] = -1;
                                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                  {
                                    if (j5valid[iij5] &&
                                        IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                    {
                                      j5valid[iij5] = false;
                                      _ij5[1] = iij5;
                                      break;
                                    }
                                  }
                                  j5 = j5array[ij5];
                                  cj5 = cj5array[ij5];
                                  sj5 = sj5array[ij5];
                                  {
                                    IkReal evalcond[8];
                                    IkReal x188 = IKsin(j5);
                                    IkReal x189 = IKcos(j5);
                                    IkReal x190 = ((IkReal(1.00000000000000)) * (sj3));
                                    IkReal x191 = ((new_r11) * (sj3));
                                    IkReal x192 = ((new_r10) * (sj3));
                                    IkReal x193 = ((cj3) * (cj4));
                                    IkReal x194 = ((IkReal(1.00000000000000)) * (sj4));
                                    IkReal x195 = ((IkReal(1.00000000000000)) * (x189));
                                    IkReal x196 = ((IkReal(1.00000000000000)) * (x188));
                                    evalcond[0] = ((new_r20) + (((sj4) * (x189))));
                                    evalcond[1] = ((new_r21) + (((IkReal(-1.00000000000000)) * (x188) * (x194))));
                                    evalcond[2] =
                                        ((((IkReal(-1.00000000000000)) * (x196))) +
                                         (((IkReal(-1.00000000000000)) * (new_r00) * (x190))) + (((cj3) * (new_r10))));
                                    evalcond[3] =
                                        ((((cj3) * (new_r11))) + (((IkReal(-1.00000000000000)) * (new_r01) * (x190))) +
                                         (((IkReal(-1.00000000000000)) * (x195))));
                                    evalcond[4] = ((((cj4) * (x188))) + (x191) + (((cj3) * (new_r01))));
                                    evalcond[5] = ((((IkReal(-1.00000000000000)) * (cj4) * (x195))) + (x192) +
                                                   (((cj3) * (new_r00))));
                                    evalcond[6] = ((((IkReal(-1.00000000000000)) * (new_r21) * (x194))) +
                                                   (((cj4) * (x191))) + (x188) + (((new_r01) * (x193))));
                                    evalcond[7] =
                                        ((((new_r00) * (x193))) + (((IkReal(-1.00000000000000)) * (x195))) +
                                         (((cj4) * (x192))) + (((IkReal(-1.00000000000000)) * (new_r20) * (x194))));
                                    if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                                        IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001 ||
                                        IKabs(evalcond[4]) > 0.000001 || IKabs(evalcond[5]) > 0.000001 ||
                                        IKabs(evalcond[6]) > 0.000001 || IKabs(evalcond[7]) > 0.000001)
                                    {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                    vinfos[0].jointtype = 1;
                                    vinfos[0].foffset = j0;
                                    vinfos[0].indices[0] = _ij0[0];
                                    vinfos[0].indices[1] = _ij0[1];
                                    vinfos[0].maxsolutions = _nj0;
                                    vinfos[1].jointtype = 1;
                                    vinfos[1].foffset = j1;
                                    vinfos[1].indices[0] = _ij1[0];
                                    vinfos[1].indices[1] = _ij1[1];
                                    vinfos[1].maxsolutions = _nj1;
                                    vinfos[2].jointtype = 1;
                                    vinfos[2].foffset = j2;
                                    vinfos[2].indices[0] = _ij2[0];
                                    vinfos[2].indices[1] = _ij2[1];
                                    vinfos[2].maxsolutions = _nj2;
                                    vinfos[3].jointtype = 1;
                                    vinfos[3].foffset = j3;
                                    vinfos[3].indices[0] = _ij3[0];
                                    vinfos[3].indices[1] = _ij3[1];
                                    vinfos[3].maxsolutions = _nj3;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j4;
                                    vinfos[4].indices[0] = _ij4[0];
                                    vinfos[4].indices[1] = _ij4[1];
                                    vinfos[4].maxsolutions = _nj4;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j5;
                                    vinfos[5].indices[0] = _ij5[0];
                                    vinfos[5].indices[1] = _ij5[1];
                                    vinfos[5].maxsolutions = _nj5;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          {
                            IkReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1] = { false };
                            _nj5 = 1;
                            if (IKabs(((gconst5) * (new_r21))) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(((IkReal(-1.00000000000000)) * (gconst5) * (new_r20))) < IKFAST_ATAN2_MAGTHRESH)
                              continue;
                            j5array[0] =
                                IKatan2(((gconst5) * (new_r21)), ((IkReal(-1.00000000000000)) * (gconst5) * (new_r20)));
                            sj5array[0] = IKsin(j5array[0]);
                            cj5array[0] = IKcos(j5array[0]);
                            if (j5array[0] > IKPI)
                            {
                              j5array[0] -= IK2PI;
                            }
                            else if (j5array[0] < -IKPI)
                            {
                              j5array[0] += IK2PI;
                            }
                            j5valid[0] = true;
                            for (int ij5 = 0; ij5 < 1; ++ij5)
                            {
                              if (!j5valid[ij5])
                              {
                                continue;
                              }
                              _ij5[0] = ij5;
                              _ij5[1] = -1;
                              for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                              {
                                if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                {
                                  j5valid[iij5] = false;
                                  _ij5[1] = iij5;
                                  break;
                                }
                              }
                              j5 = j5array[ij5];
                              cj5 = cj5array[ij5];
                              sj5 = sj5array[ij5];
                              {
                                IkReal evalcond[8];
                                IkReal x197 = IKsin(j5);
                                IkReal x198 = IKcos(j5);
                                IkReal x199 = ((IkReal(1.00000000000000)) * (sj3));
                                IkReal x200 = ((new_r11) * (sj3));
                                IkReal x201 = ((new_r10) * (sj3));
                                IkReal x202 = ((cj3) * (cj4));
                                IkReal x203 = ((IkReal(1.00000000000000)) * (sj4));
                                IkReal x204 = ((IkReal(1.00000000000000)) * (x198));
                                IkReal x205 = ((IkReal(1.00000000000000)) * (x197));
                                evalcond[0] = ((new_r20) + (((sj4) * (x198))));
                                evalcond[1] = ((new_r21) + (((IkReal(-1.00000000000000)) * (x197) * (x203))));
                                evalcond[2] = ((((IkReal(-1.00000000000000)) * (x205))) + (((cj3) * (new_r10))) +
                                               (((IkReal(-1.00000000000000)) * (new_r00) * (x199))));
                                evalcond[3] = ((((IkReal(-1.00000000000000)) * (x204))) + (((cj3) * (new_r11))) +
                                               (((IkReal(-1.00000000000000)) * (new_r01) * (x199))));
                                evalcond[4] = ((((cj4) * (x197))) + (x200) + (((cj3) * (new_r01))));
                                evalcond[5] =
                                    ((x201) + (((IkReal(-1.00000000000000)) * (cj4) * (x204))) + (((cj3) * (new_r00))));
                                evalcond[6] = ((((new_r01) * (x202))) + (((cj4) * (x200))) + (x197) +
                                               (((IkReal(-1.00000000000000)) * (new_r21) * (x203))));
                                evalcond[7] = ((((cj4) * (x201))) + (((new_r00) * (x202))) +
                                               (((IkReal(-1.00000000000000)) * (x204))) +
                                               (((IkReal(-1.00000000000000)) * (new_r20) * (x203))));
                                if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                                    IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001 ||
                                    IKabs(evalcond[4]) > 0.000001 || IKabs(evalcond[5]) > 0.000001 ||
                                    IKabs(evalcond[6]) > 0.000001 || IKabs(evalcond[7]) > 0.000001)
                                {
                                  continue;
                                }
                              }

                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                vinfos[0].jointtype = 1;
                                vinfos[0].foffset = j0;
                                vinfos[0].indices[0] = _ij0[0];
                                vinfos[0].indices[1] = _ij0[1];
                                vinfos[0].maxsolutions = _nj0;
                                vinfos[1].jointtype = 1;
                                vinfos[1].foffset = j1;
                                vinfos[1].indices[0] = _ij1[0];
                                vinfos[1].indices[1] = _ij1[1];
                                vinfos[1].maxsolutions = _nj1;
                                vinfos[2].jointtype = 1;
                                vinfos[2].foffset = j2;
                                vinfos[2].indices[0] = _ij2[0];
                                vinfos[2].indices[1] = _ij2[1];
                                vinfos[2].maxsolutions = _nj2;
                                vinfos[3].jointtype = 1;
                                vinfos[3].foffset = j3;
                                vinfos[3].indices[0] = _ij3[0];
                                vinfos[3].indices[1] = _ij3[1];
                                vinfos[3].maxsolutions = _nj3;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j4;
                                vinfos[4].indices[0] = _ij4[0];
                                vinfos[4].indices[1] = _ij4[1];
                                vinfos[4].maxsolutions = _nj4;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j5;
                                vinfos[5].indices[0] = _ij5[0];
                                vinfos[5].indices[1] = _ij5[1];
                                vinfos[5].maxsolutions = _nj5;
                                std::vector<int> vfree(0);
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              {
                IkReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1] = { false };
                _nj5 = 1;
                if (IKabs(((gconst4) * (new_r21))) < IKFAST_ATAN2_MAGTHRESH &&
                    IKabs(((IkReal(-1.00000000000000)) * (gconst4) * (new_r20))) < IKFAST_ATAN2_MAGTHRESH)
                  continue;
                j5array[0] = IKatan2(((gconst4) * (new_r21)), ((IkReal(-1.00000000000000)) * (gconst4) * (new_r20)));
                sj5array[0] = IKsin(j5array[0]);
                cj5array[0] = IKcos(j5array[0]);
                if (j5array[0] > IKPI)
                {
                  j5array[0] -= IK2PI;
                }
                else if (j5array[0] < -IKPI)
                {
                  j5array[0] += IK2PI;
                }
                j5valid[0] = true;
                for (int ij5 = 0; ij5 < 1; ++ij5)
                {
                  if (!j5valid[ij5])
                  {
                    continue;
                  }
                  _ij5[0] = ij5;
                  _ij5[1] = -1;
                  for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                  {
                    if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                        IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                    {
                      j5valid[iij5] = false;
                      _ij5[1] = iij5;
                      break;
                    }
                  }
                  j5 = j5array[ij5];
                  cj5 = cj5array[ij5];
                  sj5 = sj5array[ij5];
                  {
                    IkReal evalcond[2];
                    evalcond[0] = ((new_r20) + (((sj4) * (IKcos(j5)))));
                    evalcond[1] = ((((IkReal(-1.00000000000000)) * (sj4) * (IKsin(j5)))) + (new_r21));
                    if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001)
                    {
                      continue;
                    }
                  }

                  {
                    IkReal dummyeval[1];
                    IkReal gconst6;
                    gconst6 = IKsign((((new_r12) * (new_r12)) + ((new_r02) * (new_r02))));
                    dummyeval[0] = (((new_r12) * (new_r12)) + ((new_r02) * (new_r02)));
                    if (IKabs(dummyeval[0]) < 0.0000010000000000)
                    {
                      {
                        IkReal dummyeval[1];
                        IkReal gconst7;
                        gconst7 = IKsign(((((IkReal(-1.00000000000000)) * (new_r01) * (new_r02))) +
                                          (((IkReal(-1.00000000000000)) * (new_r11) * (new_r12)))));
                        dummyeval[0] = ((((IkReal(-1.00000000000000)) * (new_r01) * (new_r02))) +
                                        (((IkReal(-1.00000000000000)) * (new_r11) * (new_r12))));
                        if (IKabs(dummyeval[0]) < 0.0000010000000000)
                        {
                          continue;
                        }
                        else
                        {
                          {
                            IkReal j3array[1], cj3array[1], sj3array[1];
                            bool j3valid[1] = { false };
                            _nj3 = 1;
                            IkReal x206 = ((cj4) * (gconst7) * (sj5));
                            if (IKabs(((new_r12) * (x206))) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(((new_r02) * (x206))) < IKFAST_ATAN2_MAGTHRESH)
                              continue;
                            j3array[0] = IKatan2(((new_r12) * (x206)), ((new_r02) * (x206)));
                            sj3array[0] = IKsin(j3array[0]);
                            cj3array[0] = IKcos(j3array[0]);
                            if (j3array[0] > IKPI)
                            {
                              j3array[0] -= IK2PI;
                            }
                            else if (j3array[0] < -IKPI)
                            {
                              j3array[0] += IK2PI;
                            }
                            j3valid[0] = true;
                            for (int ij3 = 0; ij3 < 1; ++ij3)
                            {
                              if (!j3valid[ij3])
                              {
                                continue;
                              }
                              _ij3[0] = ij3;
                              _ij3[1] = -1;
                              for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                              {
                                if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                {
                                  j3valid[iij3] = false;
                                  _ij3[1] = iij3;
                                  break;
                                }
                              }
                              j3 = j3array[ij3];
                              cj3 = cj3array[ij3];
                              sj3 = sj3array[ij3];
                              {
                                IkReal evalcond[12];
                                IkReal x207 = IKsin(j3);
                                IkReal x208 = IKcos(j3);
                                IkReal x209 = ((IkReal(1.00000000000000)) * (cj5));
                                IkReal x210 = ((IkReal(1.00000000000000)) * (sj4));
                                IkReal x211 = ((cj4) * (x208));
                                IkReal x212 = ((sj4) * (x208));
                                IkReal x213 = ((cj4) * (x207));
                                IkReal x214 = ((new_r11) * (x207));
                                IkReal x215 = ((sj4) * (x207));
                                IkReal x216 = ((IkReal(1.00000000000000)) * (x207));
                                evalcond[0] =
                                    ((((IkReal(-1.00000000000000)) * (new_r02) * (x216))) + (((new_r12) * (x208))));
                                evalcond[1] = ((((IkReal(-1.00000000000000)) * (x210))) + (((new_r12) * (x207))) +
                                               (((new_r02) * (x208))));
                                evalcond[2] =
                                    ((((new_r10) * (x208))) + (((IkReal(-1.00000000000000)) * (new_r00) * (x216))) +
                                     (((IkReal(-1.00000000000000)) * (sj5))));
                                evalcond[3] = ((((IkReal(-1.00000000000000)) * (new_r01) * (x216))) +
                                               (((IkReal(-1.00000000000000)) * (x209))) + (((new_r11) * (x208))));
                                evalcond[4] = ((((new_r01) * (x208))) + (x214) + (((cj4) * (sj5))));
                                evalcond[5] = ((((new_r10) * (x207))) + (((new_r00) * (x208))) +
                                               (((IkReal(-1.00000000000000)) * (cj4) * (x209))));
                                evalcond[6] = ((((new_r00) * (x212))) + (((new_r10) * (x215))) + (((cj4) * (new_r20))));
                                evalcond[7] = ((((cj4) * (new_r21))) + (((new_r01) * (x212))) + (((sj4) * (x214))));
                                evalcond[8] = ((IkReal(-1.00000000000000)) + (((cj4) * (new_r22))) +
                                               (((new_r02) * (x212))) + (((new_r12) * (x215))));
                                evalcond[9] = ((((new_r12) * (x213))) + (((new_r02) * (x211))) +
                                               (((IkReal(-1.00000000000000)) * (new_r22) * (x210))));
                                evalcond[10] =
                                    ((((new_r11) * (x213))) + (((IkReal(-1.00000000000000)) * (new_r21) * (x210))) +
                                     (sj5) + (((new_r01) * (x211))));
                                evalcond[11] =
                                    ((((IkReal(-1.00000000000000)) * (x209))) + (((new_r00) * (x211))) +
                                     (((IkReal(-1.00000000000000)) * (new_r20) * (x210))) + (((new_r10) * (x213))));
                                if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                                    IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001 ||
                                    IKabs(evalcond[4]) > 0.000001 || IKabs(evalcond[5]) > 0.000001 ||
                                    IKabs(evalcond[6]) > 0.000001 || IKabs(evalcond[7]) > 0.000001 ||
                                    IKabs(evalcond[8]) > 0.000001 || IKabs(evalcond[9]) > 0.000001 ||
                                    IKabs(evalcond[10]) > 0.000001 || IKabs(evalcond[11]) > 0.000001)
                                {
                                  continue;
                                }
                              }

                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                                vinfos[0].jointtype = 1;
                                vinfos[0].foffset = j0;
                                vinfos[0].indices[0] = _ij0[0];
                                vinfos[0].indices[1] = _ij0[1];
                                vinfos[0].maxsolutions = _nj0;
                                vinfos[1].jointtype = 1;
                                vinfos[1].foffset = j1;
                                vinfos[1].indices[0] = _ij1[0];
                                vinfos[1].indices[1] = _ij1[1];
                                vinfos[1].maxsolutions = _nj1;
                                vinfos[2].jointtype = 1;
                                vinfos[2].foffset = j2;
                                vinfos[2].indices[0] = _ij2[0];
                                vinfos[2].indices[1] = _ij2[1];
                                vinfos[2].maxsolutions = _nj2;
                                vinfos[3].jointtype = 1;
                                vinfos[3].foffset = j3;
                                vinfos[3].indices[0] = _ij3[0];
                                vinfos[3].indices[1] = _ij3[1];
                                vinfos[3].maxsolutions = _nj3;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j4;
                                vinfos[4].indices[0] = _ij4[0];
                                vinfos[4].indices[1] = _ij4[1];
                                vinfos[4].maxsolutions = _nj4;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j5;
                                vinfos[5].indices[0] = _ij5[0];
                                vinfos[5].indices[1] = _ij5[1];
                                vinfos[5].maxsolutions = _nj5;
                                std::vector<int> vfree(0);
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      {
                        IkReal j3array[1], cj3array[1], sj3array[1];
                        bool j3valid[1] = { false };
                        _nj3 = 1;
                        IkReal x217 = ((gconst6) * (sj4));
                        if (IKabs(((new_r12) * (x217))) < IKFAST_ATAN2_MAGTHRESH &&
                            IKabs(((new_r02) * (x217))) < IKFAST_ATAN2_MAGTHRESH)
                          continue;
                        j3array[0] = IKatan2(((new_r12) * (x217)), ((new_r02) * (x217)));
                        sj3array[0] = IKsin(j3array[0]);
                        cj3array[0] = IKcos(j3array[0]);
                        if (j3array[0] > IKPI)
                        {
                          j3array[0] -= IK2PI;
                        }
                        else if (j3array[0] < -IKPI)
                        {
                          j3array[0] += IK2PI;
                        }
                        j3valid[0] = true;
                        for (int ij3 = 0; ij3 < 1; ++ij3)
                        {
                          if (!j3valid[ij3])
                          {
                            continue;
                          }
                          _ij3[0] = ij3;
                          _ij3[1] = -1;
                          for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                          {
                            if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                            {
                              j3valid[iij3] = false;
                              _ij3[1] = iij3;
                              break;
                            }
                          }
                          j3 = j3array[ij3];
                          cj3 = cj3array[ij3];
                          sj3 = sj3array[ij3];
                          {
                            IkReal evalcond[12];
                            IkReal x218 = IKsin(j3);
                            IkReal x219 = IKcos(j3);
                            IkReal x220 = ((IkReal(1.00000000000000)) * (cj5));
                            IkReal x221 = ((IkReal(1.00000000000000)) * (sj4));
                            IkReal x222 = ((cj4) * (x219));
                            IkReal x223 = ((sj4) * (x219));
                            IkReal x224 = ((cj4) * (x218));
                            IkReal x225 = ((new_r11) * (x218));
                            IkReal x226 = ((sj4) * (x218));
                            IkReal x227 = ((IkReal(1.00000000000000)) * (x218));
                            evalcond[0] =
                                ((((new_r12) * (x219))) + (((IkReal(-1.00000000000000)) * (new_r02) * (x227))));
                            evalcond[1] = ((((IkReal(-1.00000000000000)) * (x221))) + (((new_r12) * (x218))) +
                                           (((new_r02) * (x219))));
                            evalcond[2] = ((((IkReal(-1.00000000000000)) * (new_r00) * (x227))) +
                                           (((new_r10) * (x219))) + (((IkReal(-1.00000000000000)) * (sj5))));
                            evalcond[3] = ((((IkReal(-1.00000000000000)) * (x220))) + (((new_r11) * (x219))) +
                                           (((IkReal(-1.00000000000000)) * (new_r01) * (x227))));
                            evalcond[4] = ((((new_r01) * (x219))) + (x225) + (((cj4) * (sj5))));
                            evalcond[5] = ((((new_r00) * (x219))) + (((new_r10) * (x218))) +
                                           (((IkReal(-1.00000000000000)) * (cj4) * (x220))));
                            evalcond[6] = ((((new_r00) * (x223))) + (((cj4) * (new_r20))) + (((new_r10) * (x226))));
                            evalcond[7] = ((((sj4) * (x225))) + (((cj4) * (new_r21))) + (((new_r01) * (x223))));
                            evalcond[8] = ((IkReal(-1.00000000000000)) + (((new_r12) * (x226))) +
                                           (((new_r02) * (x223))) + (((cj4) * (new_r22))));
                            evalcond[9] = ((((IkReal(-1.00000000000000)) * (new_r22) * (x221))) +
                                           (((new_r12) * (x224))) + (((new_r02) * (x222))));
                            evalcond[10] = ((((new_r11) * (x224))) + (((new_r01) * (x222))) + (sj5) +
                                            (((IkReal(-1.00000000000000)) * (new_r21) * (x221))));
                            evalcond[11] =
                                ((((IkReal(-1.00000000000000)) * (x220))) + (((new_r10) * (x224))) +
                                 (((IkReal(-1.00000000000000)) * (new_r20) * (x221))) + (((new_r00) * (x222))));
                            if (IKabs(evalcond[0]) > 0.000001 || IKabs(evalcond[1]) > 0.000001 ||
                                IKabs(evalcond[2]) > 0.000001 || IKabs(evalcond[3]) > 0.000001 ||
                                IKabs(evalcond[4]) > 0.000001 || IKabs(evalcond[5]) > 0.000001 ||
                                IKabs(evalcond[6]) > 0.000001 || IKabs(evalcond[7]) > 0.000001 ||
                                IKabs(evalcond[8]) > 0.000001 || IKabs(evalcond[9]) > 0.000001 ||
                                IKabs(evalcond[10]) > 0.000001 || IKabs(evalcond[11]) > 0.000001)
                            {
                              continue;
                            }
                          }

                          {
                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
                            vinfos[0].jointtype = 1;
                            vinfos[0].foffset = j0;
                            vinfos[0].indices[0] = _ij0[0];
                            vinfos[0].indices[1] = _ij0[1];
                            vinfos[0].maxsolutions = _nj0;
                            vinfos[1].jointtype = 1;
                            vinfos[1].foffset = j1;
                            vinfos[1].indices[0] = _ij1[0];
                            vinfos[1].indices[1] = _ij1[1];
                            vinfos[1].maxsolutions = _nj1;
                            vinfos[2].jointtype = 1;
                            vinfos[2].foffset = j2;
                            vinfos[2].indices[0] = _ij2[0];
                            vinfos[2].indices[1] = _ij2[1];
                            vinfos[2].maxsolutions = _nj2;
                            vinfos[3].jointtype = 1;
                            vinfos[3].foffset = j3;
                            vinfos[3].indices[0] = _ij3[0];
                            vinfos[3].indices[1] = _ij3[1];
                            vinfos[3].maxsolutions = _nj3;
                            vinfos[4].jointtype = 1;
                            vinfos[4].foffset = j4;
                            vinfos[4].indices[0] = _ij4[0];
                            vinfos[4].indices[1] = _ij4[1];
                            vinfos[4].maxsolutions = _nj4;
                            vinfos[5].jointtype = 1;
                            vinfos[5].foffset = j5;
                            vinfos[5].indices[0] = _ij5[0];
                            vinfos[5].indices[1] = _ij5[1];
                            vinfos[5].maxsolutions = _nj5;
                            std::vector<int> vfree(0);
                            solutions.AddSolution(vinfos, vfree);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool
ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
  IKSolver solver;
  return solver.ComputeIk(eetrans, eerot, pfree, solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
  return "<robot:genericrobot - abb_irb2400 (1f04c8a90b29778d31a8f2cb88b4a166)>";
}

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
}  // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
  if (argc != 12 + GetNumFreeParameters() + 1)
  {
    printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
           "Returns the ik solutions given the transformation of the end effector specified by\n"
           "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
           "There are %d free parameters that have to be specified.\n\n",
           GetNumFreeParameters());
    return 1;
  }

  IkSolutionList<IkReal> solutions;
  std::vector<IkReal> vfree(GetNumFreeParameters());
  IkReal eerot[9], eetrans[3];
  eerot[0] = atof(argv[1]);
  eerot[1] = atof(argv[2]);
  eerot[2] = atof(argv[3]);
  eetrans[0] = atof(argv[4]);
  eerot[3] = atof(argv[5]);
  eerot[4] = atof(argv[6]);
  eerot[5] = atof(argv[7]);
  eetrans[1] = atof(argv[8]);
  eerot[6] = atof(argv[9]);
  eerot[7] = atof(argv[10]);
  eerot[8] = atof(argv[11]);
  eetrans[2] = atof(argv[12]);
  for (std::size_t i = 0; i < vfree.size(); ++i)
    vfree[i] = atof(argv[13 + i]);
  bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

  if (!bSuccess)
  {
    fprintf(stderr, "Failed to get ik solution\n");
    return -1;
  }

  printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
  std::vector<IkReal> solvalues(GetNumJoints());
  for (std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
  {
    const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
    printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
    std::vector<IkReal> vsolfree(sol.GetFree().size());
    sol.GetSolution(&solvalues[0], vsolfree.size() > 0 ? &vsolfree[0] : NULL);
    for (std::size_t j = 0; j < solvalues.size(); ++j)
      printf("%.15f, ", solvalues[j]);
    printf("\n");
  }

  IkReal rot[9], trans[3];
  IkReal sol[6] = { 0.46365, 0.93285, 1.75595 - M_PI / 2.0, 6.28319, -2.68880, -0.46365 };
  ComputeFk(sol, trans, rot);
  printf("FK: %f %f %f\n", trans[0], trans[1], trans[2]);

  return 0;
}

#endif
TESSERACT_COMMON_IGNORE_WARNINGS_POP
// clang-format on
