name: Focal-Build

on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron: '0 5 * * *'
  release:
    types:
      - released

jobs:
  industrial_ci:
    name: Noetic
    runs-on: ubuntu-latest
    env:
      CI_NAME: Focal-Build
      CCACHE_DIR: "/home/runner/work/tesseract/tesseract/Focal-Build/.ccache"
      ROS_DISTRO: noetic
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      PUSH_DOCKER_IMAGE: ${{ github.ref == 'refs/heads/master' || github.event_name == 'release' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Free disk space
        continue-on-error: true
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: ccache cache files
        continue-on-error: true
        uses: actions/cache@v1.1.0
        with:
          path: ${{ env.CI_NAME }}/.ccache
          key: ${{ env.CI_NAME }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ env.CI_NAME }}-ccache-

      - name: Login to Github container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker meta-information
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
            prefix=
            suffix=
          tags: |
            type=ref,event=branch,prefix=${{ env.ROS_DISTRO }}-
            type=ref,event=tag,prefix=${{ env.ROS_DISTRO }}-

      - name: Set build type
        run: |
          if [[ "${{ env.PUSH_DOCKER_IMAGE }}" = true ]]
          then
            echo "BUILD_TYPE=Release" >> $GITHUB_ENV
          else
            echo "BUILD_TYPE=Debug" >> $GITHUB_ENV
          fi

      - name: Build repository
        uses: 'ros-industrial/industrial_ci@master'
        env:
          OS_NAME: ubuntu
          OS_CODE_NAME: focal
          ROS_REPO: main
          UPSTREAM_WORKSPACE: 'dependencies.rosinstall'
          ROSDEP_SKIP_KEYS: "bullet fcl ompl orocos_kdl python-numpy ifopt python descartes_opw descartes_samplers descartes_light opw_kinematics ros_industrial_cmake_boilerplate iwyu taskflow"
          DOCKER_IMAGE: "rosindustrial/tesseract:${{ env.ROS_DISTRO }}"
          PARALLEL_TESTS: false
          PARALLEL_BUILDS: false
          PREFIX: ${{ github.repository }}_
          BEFORE_RUN_TARGET_TEST_EMBED: "ici_with_unset_variables source $BASEDIR/${PREFIX}target_ws/install/setup.bash"
          UPSTREAM_CMAKE_ARGS: "-DCMAKE_BUILD_TYPE=Release"
          TARGET_CMAKE_ARGS: "-DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DTESSERACT_ENABLE_TESTING=ON"
          AFTER_SCRIPT: 'catkin build -w $target_ws --no-deps --verbose tesseract_collision tesseract_common tesseract_environment tesseract_geometry tesseract_kinematics tesseract_scene_graph tesseract_state_solver tesseract_urdf --make-args test'
          DOCKER_COMMIT: ${{ steps.meta.outputs.tags }}

      - name: Push post-build Docker
        if: ${{ env.PUSH_DOCKER_IMAGE  == 'true' }}
        run: docker push ${{ steps.meta.outputs.tags }}
